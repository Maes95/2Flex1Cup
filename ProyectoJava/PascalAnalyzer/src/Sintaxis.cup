import java_cup.runtime.*;
import java.util.Stack;

/* ------------ CODIGO AÑADIDO PARA MOSTRAR EL ARBOL -----------*/

init with {:
  // INIT CODE
  // Codigo para inicializar
  System.out.println("---------------------------------------------------------------------\n"
                    +"|       ANALIZADOR LEXICO Y SINTACTICO PARA LEGUAJE PASCAL          |\n"
                    +"---------------------------------------------------------------------\n");
  this.stack = new Stack<>();
  this.htmlGenerator = new HTMLGenerator();
:};

action code {:
  // ACTION CODE
  // Codigo para métodos
  public void pushRegla(String cadena){
    System.out.println(cadena);
    Regla regla = new Regla(cadena);
    stack.push(regla);
  }

  public void mostrarArbol(String cadena){
    System.out.println(cadena + "\n");
    Regla regla = new Regla(cadena);
    stack.push(regla);
    System.out.println("---------------------------------------------------------------------\n"
                      +"|                    ARBOL SINTACTICO GENERADO                      |\n"
                      +"---------------------------------------------------------------------\n");
    System.out.println("_" + regla.antecedente);
    Regla.printSyntacticTree(stack, ""); // Pinta el arbol sintáctico (ver clase "Regla")
  }

:};

/* ------------ CODIGO AÑADIDO PARA MOSTRAR ERRORES ----------- */

parser code {:

    Stack<Regla> stack; // Pila donde se almacenan las reglas que se han reducido

    HTMLGenerator htmlGenerator;

    public void report_error(String mensajeError, Object token) {

                 StringBuilder salidaError = new StringBuilder("ERROR SINTACTICO: ");

                 if (token instanceof java_cup.runtime.Symbol) {

                     java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) token);

                     if (s.left >= 0) {
                         salidaError.append(" en la linea "+(s.left + 1));
                         if (s.right >= 0)
                             salidaError.append(", columna "+(s.right));
                     }

                     if (s.value != null){
                         salidaError.append(". No se esperaba el token <"+s.value.toString()+">");
                     }

                 }

        salidaError.append(" : " + mensajeError);

        System.err.println(salidaError);
    }

    /* Método para errores irrecuperables */

    public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
      report_fatal_error("El analizador no pudo recuperarse del error sintactico", token);
    }

    public void report_fatal_error(String mensajeError, Object token) {
        mensajeError = "Error sintactico irrecuperable\n" + mensajeError;
        report_error(mensajeError, token);
        System.exit(1);
    }

    /* Método para errores recuperables */

    public void syntax_error(Symbol token) {
      report_error("Se procedera a intentar continuar con el analisis sintactico", token);
    }

:};

/* ------------ DECLARACIÓN DE TERMINALES ----------- */

terminal program, begin, end, var, const_t, if_t, then_t, else_t, while_t, for_t, to, do_t, case_t, of, function, procedure, type, int_name, real_name, char_name,
          semicolons, colons, asig, equal, comma, point, open_bracket, close_bracket, open_square_bracket, close_square_bracket, comparator_op,
          not_op, decimal_value, hexadecimal_value, string_literal, identifier, plus, minus, product, div_op, mod_op, and_op, or_op, two_points, array, record;

/* ------------ DECLARACIÓN DE NO TERMINALES ----------- */

non terminal PRG, BLQ, DCLLIST, SENTLIST, DCL, DEFCTE, CTELIST, SIMPVALUE, DEFVAR, DEFVARLIST, VARLIST, DEFPROC, DEFFUN, FORMAL_PARAMLIST, FORMAL_PARAM,
              TBAS, SENT, ASIG, ID, EXP, OP, OPCOMP, OPARIT, OPLOG, FACTOR, SUBPARAMLIST, EXPLIST, PROC_CALL, EXEBLQ, DCLLIST_BLQ, DCL_BLQ, DEFTYPE, TYPELIST, UDTYPE, ALLTYPES,
              COND, ELSECOND, WLOOP, FLOOP, CASE, CASELIST;

/* ------------ DECLARACIÓN DE PRECEDENCIA  ----------- */

precedence left comparator_op;
precedence left plus, minus, or_op;
precedence left product, div_op, mod_op, and_op;
precedence left open_bracket, close_bracket;
precedence left else_t;

/* ------------ SINTAXIS BÁSICA  ----------- */

PRG::= program identifier:i1 semicolons BLQ:blq point {: mostrarArbol("PRG <%program "+i1+" ; BLQ .%>");
                                                         htmlGenerator.closeHTML("program", (String)i1, ";", (String)blq, ".");:};
BLQ::= DCLLIST:dcllist begin SENTLIST:sentlist end {: pushRegla("BLQ <%DCLLIST begin SENTLIST end%>");
                                                      RESULT = dcllist + "begin" + sentlist + "end";:};

DCLLIST::=                          {: pushRegla("DCLLIST <%lambda%>");
                                       RESULT = "";:}
          | DCLLIST:dcllist DCL:dcl {: pushRegla("DCLLIST <%DCLLIST DCL%>");
                                       RESULT = dcllist + (String)dcl;:}
          ;

SENTLIST::= SENT:sent    {: pushRegla("SENTLIST <%SENT%>");
                         RESULT = sent;:}
          | SENTLIST:sentlist SENT:sent {: pushRegla("SENTLIST <%SENTLIST SENT%>");
                                           RESULT = sentlist + (String)sent;:}
          | error
          ;

DCL::= DEFCTE   {: pushRegla("DCL <%DEFCTE%>");
                   RESULT = "dcl";:}
      | DEFVAR  {: pushRegla("DCL <%DEFVAR%>");
                   RESULT = "dcl";:}
      | DEFPROC {: pushRegla("DCL <%DEFPROC%>");
                   RESULT = "dcl";:}
      | DEFFUN  {: pushRegla("DCL <%DEFFUN%>");
                   RESULT = "dcl";:}
      | DEFTYPE {: pushRegla("DCL <%DEFTYPE%>");
                   RESULT = "dcl";:}
      | error
      ;

DEFCTE::= const_t CTELIST {: pushRegla("DEFCTE <%const CTELIST%>"); :};

CTELIST::= identifier:i1 equal SIMPVALUE semicolons {: pushRegla("CTELIST <%" +i1+" = SIMPVALUE ;%>"); :}
          | CTELIST identifier:i2 equal SIMPVALUE semicolons {: pushRegla("CTELIST <%CTELIST "+i2+" = SIMPVALUE ;%>"); :}
          ;

SIMPVALUE::= decimal_value:dv    {: pushRegla("SIMVALUE <%" + dv + "%>" ); :}
          | hexadecimal_value:hv {: pushRegla("SIMVALUE <%" + hv + "%>"); :}
          | string_literal:sl    {: pushRegla("SIMVALUE <%" + sl + "%>"); :}
          ;

DEFVAR::= var DEFVARLIST semicolons {: pushRegla("DEFVAR <%var DEFVARLIST ;%>"); :};

DEFVARLIST::= VARLIST colons ALLTYPES                        {: pushRegla("DEFVARLIST <%VARLIST : ALLTYPES%>"); :}
             | DEFVARLIST semicolons VARLIST colons ALLTYPES {: pushRegla("DEFVARLIST <%DEFVARLIST ; VARLIST : ALLTYPES%>"); :}
             ;

VARLIST::= identifier:i1                 {: pushRegla("VARLIST <%" + i1 + "%>"); :}
           | identifier:i2 comma VARLIST {: pushRegla("VARLIST <%"+i2+" , VARLIST%>"); :}
           ;

DEFPROC::=  procedure identifier:i1 FORMAL_PARAMLIST semicolons BLQ semicolons {: pushRegla("DEFPROC <%procedure "+i1+" FORMAL_PARAMLIST ; BLQ ;%>"); :};
DEFFUN::=  function identifier:i2 FORMAL_PARAMLIST colons ALLTYPES semicolons BLQ semicolons {: pushRegla("DEFFUN <%function "+i2+" FORMAL_PARAMLIST : ALLTYPES ; BLQ ;%>"); :};

FORMAL_PARAMLIST::=                                           {: pushRegla("FORMAL_PARAMLIST <%lambda%>"); :}
                    | open_bracket FORMAL_PARAM close_bracket {: pushRegla("FORMAL_PARAMLIST <%( FORMAL_PARAM )%>"); :}
                    ;

FORMAL_PARAM::= VARLIST colons ALLTYPES                          {: pushRegla("FORMAL_PARAM <%VARLIST : ALLTYPES%>"); :}
               | VARLIST colons ALLTYPES semicolons FORMAL_PARAM {: pushRegla("FORMAL_PARAM <%VARLIST : ALLTYPES ; FORMAL_PARAM%>"); :}
               ;

TBAS::= int_name    {: pushRegla("TBAS <%INTEGER%>"); :}
        | real_name {: pushRegla("TBAS <%REAL%>"); :}
        | char_name {: pushRegla("TBAS <%CHAR%>"); :}
        ;

SENT::= ASIG semicolons         {: pushRegla("SENT <%ASIG ;%>");
                                   RESULT = "asig";:}
        | PROC_CALL semicolons  {: pushRegla("SENT <%PROC_CALL ;%>");
                                   RESULT = "proc_call";:}
        | EXEBLQ                {: pushRegla("SENT <%EXEBLQ%>");
                                   RESULT = "exeblq";:}
        | COND                  {: pushRegla("SENT <%COND%>");
                                   RESULT = "cond";:}
        | WLOOP                 {: pushRegla("SENT <%WLOOP%>");
                                   RESULT = "wloop";:}
        | FLOOP                 {: pushRegla("SENT <%FLOOP%>");
                                   RESULT = "floop";:}
        | CASE                  {: pushRegla("SENT <%CASE%>");
                                   RESULT = "case";:}
        ;

ASIG::= ID asig EXP {: pushRegla("ASIG <%ID := EXP%>"); :};

ID::= identifier:i1                                                {: pushRegla("ID <%"+i1+"%>"); :}
      | identifier:i4 open_square_bracket EXP close_square_bracket {: pushRegla("ID <%"+i4+" [ EXP ]%>"); :}
      | identifier:i2 point identifier:i3                          {: pushRegla("ID <%"+i2+" . "+i3+"%>"); :}
      ;

EXP::= EXP OP EXP {: pushRegla("EXP <%EXP OP EXP%>"); :}
       | FACTOR   {: pushRegla("EXP <%FACTOR%>"); :}
       ;

OP::= OPCOMP   {: pushRegla("OP <%OPCOMP%>"); :}
      | OPLOG  {: pushRegla("OP <%OPLOG%>"); :}
      | OPARIT {: pushRegla("OP <%OPARIT%>"); :}
      ;

OPCOMP::= comparator_op:op {: pushRegla("OPCOMP <%"+op+"%>"); :};

OPARIT::= plus       {: pushRegla("OPARIT <%+%>"); :}
          | minus    {: pushRegla("OPARIT <%-%>"); :}
          | product  {: pushRegla("OPARIT <%*%>"); :}
          | div_op   {: pushRegla("OPARIT <%div%>"); :}
          | mod_op   {: pushRegla("OPARIT <%mod%>"); :}
          ;


OPLOG::= and_op    {: pushRegla("OPLOG <%and%>"); :}
          | or_op  {: pushRegla("OPLOG <%or%>"); :}
          ;

FACTOR::= SIMPVALUE                                                      {: pushRegla("FACTOR <%SIMPVALUE%>"); :}
          | not_op FACTOR                                                {: pushRegla("FACTOR <%not FACTOR%>"); :}
          | open_bracket EXP close_bracket                               {: pushRegla("FACTOR <%( EXP )%>"); :}
          | identifier:i1 SUBPARAMLIST                                   {: pushRegla("FACTOR <%"+i1+" SUBPARAMLIST%>"); :}
          | identifier:i2 open_square_bracket EXP close_square_bracket   {: pushRegla("FACTOR <%"+i2+" [ EXP ]%>"); :}
          | identifier:i3 point identifier:i4                            {: pushRegla("FACTOR <%"+i3+" . "+i4+"%>"); :}
          ;

SUBPARAMLIST::=                                      {: pushRegla("SUBPARAMLIST <%lambda%>"); :}
                | open_bracket EXPLIST close_bracket {: pushRegla("SUBPARAMLIST <%( EXPLIST )%>"); :}
                ;

EXPLIST::= EXP                {: pushRegla("EXPLIST <%EXP%>"); :}
          | EXP comma EXPLIST {: pushRegla("EXPLIST <%EXP , EXPLIST%>"); :}
          ;

PROC_CALL::= identifier:i1 SUBPARAMLIST {: pushRegla("PROC_CALL <%"+i1+" SUBPARAMLIST%>"); :};
EXEBLQ::= DCLLIST_BLQ begin SENTLIST end {: pushRegla("EXEBLQ <%DCLLIST_BLQ begin SENTLIST end%>"); :};

DCLLIST_BLQ::=                                   {: pushRegla("DCLLIST_BLQ <%lambda%>"); :}
               | DCLLIST_BLQ semicolons DCL_BLQ  {: pushRegla("DCLLIST_BLQ <%DCLLIST_BLQ ; DCL_BLQ%>"); :}
               ;

DCL_BLQ::= DEFCTE    {: pushRegla("DCL_BLQ <%DEFCTE%>"); :}
           | DEFVAR  {: pushRegla("DCL_BLQ <%DEFVAR%>"); :}
           | DEFTYPE {: pushRegla("DCL_BLQ <%DEFTYPE%>"); :}
           ;

/* ------------ SINTAXIS ESTRUCTURAS DE DATOS  ----------- */

DEFTYPE ::= type TYPELIST {: pushRegla("DEFTYPE <%type TYPELIST%>"); :};

TYPELIST ::= identifier:i1 equal UDTYPE semicolons              {: pushRegla("TYPELIST <%"+i1+" = UDTYPE ;%>"); :}
              | identifier:i2 equal UDTYPE semicolons TYPELIST  {: pushRegla("TYPELIST <%"+i2+" = UDTYPE ; TYPELIST%>"); :}
              ;

UDTYPE ::= array open_square_bracket SIMPVALUE two_points SIMPVALUE close_square_bracket of ALLTYPES {: pushRegla("UDTYPE <%array [ SIMPVALUE .. SIMPVALUE ] of ALLTYPES%>"); :}
              | record DEFVARLIST end                                                                {: pushRegla("UDTYPE <%record DEFVARLIST end%>"); :}
              ;

ALLTYPES ::= TBAS            {: pushRegla("ALLTYPES <%TBAS%>"); :}
             | identifier:i  {: pushRegla("ALLTYPES <%"+i+"%>"); :}
             ;

/* ------------ SINTAXIS SENTENCIAS DE CONTROL DE FLUJO  ----------- */

                         /* SENTENCIA IF */

COND ::= if_t EXP then_t SENT ELSECOND {: pushRegla("COND <%if EXP then SENT ELSECOND%>"); :};

ELSECOND ::=               {: pushRegla("ELSECOND <%lambda%>"); :}
            | else_t SENT  {: pushRegla("ELSECOND <%else SENT%>"); :}
            ;

                        /* SENTENCIA WHILE */

WLOOP ::= while_t EXP do_t SENT {: pushRegla("WLOOP <%while EXP do SENT%>"); :};

                        /* SENTENCIA FOR  */

FLOOP ::= for_t identifier:i1 asig EXP to EXP do_t SENT {: pushRegla("FLOOP <%for "+i1+" := EXP to EXP do SENT%>"); :};

                        /* SENTENCIA CASE */

CASE ::= case_t EXP of CASELIST end {: pushRegla("CASE <%case EXP of CASELIST end%>"); :};

CASELIST ::= EXP colons SENT            {: pushRegla("CASELIST <%EXP : SENT%>"); :}
             | EXP colons SENT CASELIST {: pushRegla("CASELIST <%EXP : SENT CASELIST%>"); :}
             ;
