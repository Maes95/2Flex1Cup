import java_cup.runtime.*;
import java.util.Stack;

/* ------------ CODIGO AÑADIDO PARA MOSTRAR EL ARBOL -----------*/

init with {:
  // INIT CODE
  // Codigo para inicializar
  System.out.println("---------------------------------------------------------------------\n"
                    +"|       ANALIZADOR LEXICO Y SINTACTICO PARA LEGUAJE PASCAL          |\n"
                    +"---------------------------------------------------------------------\n");
  this.htmlGenerator = new HTMLGenerator(this.fileName);
:};


/* ------------ CODIGO AÑADIDO PARA MOSTRAR ERRORES ----------- */

parser code {:

    Stack<Regla> stack; // Pila donde se almacenan las reglas que se han reducido

    HTMLGenerator htmlGenerator;

    public String fileName;

    public void report_error(String mensajeError, Object token) {

                 StringBuilder salidaError = new StringBuilder("ERROR SINTACTICO: ");

                 if (token instanceof java_cup.runtime.Symbol) {

                     java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) token);

                     if (s.left >= 0) {
                         salidaError.append(" en la linea "+(s.left + 1));
                         if (s.right >= 0)
                             salidaError.append(", columna "+(s.right));
                     }

                     if (s.value != null){
                         salidaError.append(". No se esperaba el token <"+s.value.toString()+">");
                     }

                 }

        salidaError.append(" : " + mensajeError);

        System.err.println(salidaError);
    }

    /* Método para errores irrecuperables */

    public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
      report_fatal_error("El analizador no pudo recuperarse del error sintactico", token);
    }

    public void report_fatal_error(String mensajeError, Object token) {
        mensajeError = "Error sintactico irrecuperable\n" + mensajeError;
        report_error(mensajeError, token);
        System.exit(1);
    }

    /* Método para errores recuperables */

    public void syntax_error(Symbol token) {
      report_error("Se procedera a intentar continuar con el analisis sintactico", token);
    }

:};

/* ------------ DECLARACIÓN DE TERMINALES ----------- */

terminal String program, begin, end, var, const_t, if_t, then_t, else_t, while_t, for_t, to, do_t, case_t, of, function, procedure, type, int_name, real_name, char_name,
          semicolons, colons, asig, equal, comma, point, open_bracket, close_bracket, open_square_bracket, close_square_bracket, comparator_op,
          not_op, decimal_value, hexadecimal_value, string_literal, plus, minus, product, div_op, mod_op, and_op, or_op, two_points, array, record;

terminal String identifier;
/* ------------ DECLARACIÓN DE NO TERMINALES ----------- */

non terminal String PRG, BLQ, DCLLIST, SENTLIST, DCL, DEFCTE, CTELIST, SIMPVALUE, DEFVAR, DEFVARLIST, VARLIST, DEFPROC, DEFFUN, FORMAL_PARAMLIST, FORMAL_PARAM,
              TBAS, SENT, ASIG, ID, EXP, OP, OPCOMP, OPARIT, OPLOG, FACTOR, SUBPARAMLIST, EXPLIST, PROC_CALL, EXEBLQ, DCLLIST_BLQ, DCL_BLQ, DEFTYPE, TYPELIST, UDTYPE, ALLTYPES,
              COND, ELSECOND, WLOOP, FLOOP, CASE, CASELIST;

/* ------------ DECLARACIÓN DE PRECEDENCIA  ----------- */

precedence left comparator_op;
precedence left plus, minus, or_op;
precedence left product, div_op, mod_op, and_op;
precedence left open_bracket, close_bracket;
precedence left else_t;

/* ------------ SINTAXIS BÁSICA  ----------- */

PRG::= program identifier:i1 semicolons BLQ:blq point {: htmlGenerator.closeHTML(i1);:};
BLQ::= DCLLIST:dcllist begin{: htmlGenerator.indentLevel++;:} SENTLIST:sentlist end
                                                      {: htmlGenerator.indentLevel--;

                                                      htmlGenerator.getMainProgram(sentlist);
                                                      RESULT = dcllist + htmlGenerator.getReservedWord("begin") + htmlGenerator.checkReturnParam(sentlist) + htmlGenerator.getReservedWord("end");:};

DCLLIST::=                          {:
                                       RESULT = "";:}
          | DCLLIST:dcllist DCL:dcl {:
                                       RESULT = dcllist + (String)dcl;:}
          ;

SENTLIST::= {: htmlGenerator.sentCond = false; :} SENT:sent    {:  // Hay mas de una sentencia
                                                                  RESULT = sent;:}
          | SENTLIST:sentlist SENT:sent {:
                                           RESULT = sentlist + (String)sent;:}
          | error
          ;

DCL::= DEFCTE:defcte   {:
                          htmlGenerator.updateLastDcl(defcte);
                          RESULT = defcte;:}
      | DEFVAR:defvar  {:
                          htmlGenerator.updateLastDcl(defvar);
                          RESULT = defvar;:}
      | DEFPROC:defproc {:  // TODO
                           RESULT = defproc;:}
      | DEFFUN:deffun  {:
                          RESULT = deffun;:}
      | DEFTYPE:deftype {:
                           htmlGenerator.updateLastDcl(deftype);
                           RESULT = deftype;:}
      | error
      ;

DEFCTE::= const_t {: htmlGenerator.indentLevel++;:} CTELIST:ctelist {: htmlGenerator.indentLevel--;
                                                                       RESULT = htmlGenerator.getReservedWord(htmlGenerator.getSent("const")) + ctelist;:};

CTELIST::= identifier:i1 equal SIMPVALUE:simpvalue semicolons {: RESULT = htmlGenerator.getSent(htmlGenerator.getIdentDeclaration(i1) + "=" + simpvalue + ";");:}
          | CTELIST:ctelist identifier:i2 equal SIMPVALUE:simpvalue semicolons {: RESULT = (String)ctelist + htmlGenerator.getSent(htmlGenerator.getIdent(i2) + "=" + (String)simpvalue + ";");:}
          ;

SIMPVALUE::= decimal_value:dv    {: RESULT = htmlGenerator.getConst(dv);:}
          | hexadecimal_value:hv {: RESULT = htmlGenerator.getConst(hv);:}
          | string_literal:sl    {: RESULT = htmlGenerator.getConst("'"+sl+"''");:}
          ;

DEFVAR::= var {:htmlGenerator.indentLevel++;:} DEFVARLIST:defvarlist semicolons {: htmlGenerator.indentLevel--; RESULT = htmlGenerator.getReservedWord(htmlGenerator.getSent("var")) + defvarlist;:};

DEFVARLIST::= VARLIST:varlist colons ALLTYPES:alltypes                                   {: htmlGenerator.pushVar(varlist, alltypes);
                                                                                            RESULT = htmlGenerator.getSent(varlist + " : " + alltypes + "; ");:}
             | DEFVARLIST:defvarlist semicolons VARLIST:varlist colons ALLTYPES:alltypes {: htmlGenerator.pushVar(varlist, alltypes);
                                                                                            RESULT = defvarlist + htmlGenerator.getSent(varlist + " : " + alltypes + "; ");:}
             ;

VARLIST::= identifier:i1                         {: RESULT = htmlGenerator.getIdentDeclaration(i1);:}
           | identifier:i2 comma VARLIST:varlist {: RESULT = htmlGenerator.getIdentDeclaration(i2) + "," + varlist;:}
           ;

DEFPROC::=  procedure identifier:i1 {: htmlGenerator.addMethod(i1, false); :}FORMAL_PARAMLIST:formal_paramlist semicolons BLQ:blq semicolons {:

                    RESULT = htmlGenerator.getProc(i1, formal_paramlist, blq);:};

DEFFUN::=  function identifier:i2 {: htmlGenerator.addMethod(i2, true); :}FORMAL_PARAMLIST:formal_paramlist colons ALLTYPES:alltypes semicolons BLQ:blq semicolons {:

                    RESULT = htmlGenerator.getFunc(i2, formal_paramlist, alltypes, blq);:};

FORMAL_PARAMLIST::=                                                        {: RESULT = "";:}
                    | open_bracket FORMAL_PARAM:formal_param close_bracket {: RESULT = "(" + formal_param + ")";:}
                    ;

FORMAL_PARAM::= VARLIST:varlist colons ALLTYPES:alltypes                                       {: RESULT = varlist + ":" + alltypes;:}
               | VARLIST:varlist colons ALLTYPES:alltypes semicolons FORMAL_PARAM:formal_param {: RESULT = varlist + ":" + alltypes + ";" + formal_param;:}
               ;

TBAS::= int_name    {:
                       RESULT = htmlGenerator.getReservedWord(" INTEGER");:}
        | real_name {:
                       RESULT = htmlGenerator.getReservedWord(" REAL");:}
        | char_name {:
                       RESULT = htmlGenerator.getReservedWord(" CHARACTER");:}
        ;

SENT::= ASIG:asig semicolons              {: RESULT = htmlGenerator.getSent(asig + ";");:}
        | PROC_CALL:proc_call semicolons  {: RESULT = htmlGenerator.getSent(proc_call + ";");:}
        | EXEBLQ:exeblq                   {: RESULT = exeblq;:}
        | COND:cond                       {: RESULT = htmlGenerator.getSent(cond);:}
        | WLOOP:wloop                     {: RESULT = htmlGenerator.getSent(wloop);:}
        | FLOOP:floop                     {: RESULT = htmlGenerator.getSent(floop);:}
        | CASE:case_t                     {: RESULT = htmlGenerator.getSent(case_t);:}
        ;

ASIG::= ID:id asig EXP:exp {: RESULT = htmlGenerator.checkAsig(id,exp);:};

ID::= identifier:i1                                                    {: RESULT = htmlGenerator.getIdent(i1);:}
      | identifier:i4 open_square_bracket EXP:exp close_square_bracket {: RESULT = htmlGenerator.getIdent(i4) + "[ " + exp + " ]";:}
      | identifier:i2 point identifier:i3                              {: RESULT = htmlGenerator.getIdent(i2) + "." + htmlGenerator.getIdent(i3);:}
      ;

EXP::= EXP:exp1 OP:op EXP:exp2 {: RESULT = (String)exp1 + op + (String)exp2;:}
       | FACTOR:factor         {: RESULT = factor;:}
       ;

OP::= OPCOMP:opcomp   {: RESULT = opcomp;:}
      | OPLOG:oplog   {: RESULT = oplog;:}
      | OPARIT:oparit {: RESULT = oparit;:}
      ;

OPCOMP::= comparator_op:op {: RESULT = " "+op+" ";:};

OPARIT::= plus       {: RESULT = " + ";:}
          | minus    {: RESULT = " - ";:}
          | product  {: RESULT = " * ";:}
          | div_op   {: RESULT = " div ";:}
          | mod_op   {: RESULT = " mod ";:}
          ;


OPLOG::= and_op    {: RESULT = " and ";:}
          | or_op  {: RESULT = " or ";:}
          ;

FACTOR::= SIMPVALUE:simpvalue                                                {: RESULT = simpvalue;:}
          | not_op FACTOR:factor                                             {: RESULT = "not" + factor;:}
          | open_bracket EXP:exp close_bracket                               {: RESULT = "(" + exp + ")";:}
          | identifier:i1 SUBPARAMLIST:subparamlist                          {: RESULT = htmlGenerator.getIdent(i1) + (String)subparamlist;:}
          | identifier:i2 open_square_bracket EXP:exp close_square_bracket   {: RESULT = htmlGenerator.getIdent(i2) + "[" + exp + "]";:}
          | identifier:i3 point identifier:i4                                {: RESULT = htmlGenerator.getIdent(i3) + "." + htmlGenerator.getIdent(i4);:}
          ;

SUBPARAMLIST::=                                              {: RESULT = "";:}
                | open_bracket EXPLIST:explist close_bracket {: RESULT = " (" + explist + ") ";:}
                ;

EXPLIST::= EXP:exp                        {: RESULT = exp;:}
          | EXP:exp comma EXPLIST:explist {: RESULT = exp + "," + explist;:}
          ;

PROC_CALL::= identifier:i1 SUBPARAMLIST:subparamlist {: RESULT = htmlGenerator.getIdent(i1) + (String)subparamlist;:};
EXEBLQ::= DCLLIST_BLQ:dcllist_blq begin {:htmlGenerator.indentLevel++;:} SENTLIST:sentlist end {:htmlGenerator.indentLevel--;
                                          RESULT = dcllist_blq + htmlGenerator.getReservedWordIdent("begin") + sentlist + htmlGenerator.getReservedWordIdent("end");:};

DCLLIST_BLQ::=                                   {: RESULT = "";:}
               | DCLLIST_BLQ:dcllist_blq semicolons DCL_BLQ:dcl_blq  {: RESULT = dcllist_blq + ";" + dcl_blq;:}
               ;

DCL_BLQ::= DEFCTE:defcte     {: RESULT = defcte;:}
           | DEFVAR:defvar   {: RESULT = defvar;:}
           | DEFTYPE:deftype {: RESULT = deftype;:}
           ;

/* ------------ SINTAXIS ESTRUCTURAS DE DATOS  ----------- */

DEFTYPE ::= type {:htmlGenerator.indentLevel++;:}TYPELIST:typelist {: htmlGenerator.indentLevel--; RESULT = htmlGenerator.getReservedWord(htmlGenerator.getSent("type ")) + typelist;:};

TYPELIST ::= identifier:i1 equal UDTYPE:udtype semicolons                       {: htmlGenerator.pushType(i1);
                                                                                   RESULT =  htmlGenerator.getSent(htmlGenerator.getIdentDeclaration(i1) + " = " + udtype + htmlGenerator.getSentClose(";"));:}
              | identifier:i2 equal UDTYPE:udtype semicolons TYPELIST:typelist  {: htmlGenerator.pushType(i2);
                                                                                   RESULT =  htmlGenerator.getSent(htmlGenerator.getIdentDeclaration(i2) + " = " + udtype + htmlGenerator.getSentClose(";")) + typelist;:}
              ;

UDTYPE ::= array open_square_bracket SIMPVALUE:simpvalue1 two_points SIMPVALUE:simpvalue2 close_square_bracket of ALLTYPES:alltypes {:
                    RESULT = htmlGenerator.getReservedWord("array ") + "[ " + htmlGenerator.checkRange(simpvalue1,simpvalue2) + " ]" + htmlGenerator.getReservedWord(" of ") + alltypes;:}
              | record {:htmlGenerator.indentLevel++;:}DEFVARLIST:defvarlist end {:
                    htmlGenerator.indentLevel--;
                    RESULT = htmlGenerator.getReservedWord("record ") + defvarlist + htmlGenerator.getSentOpen(htmlGenerator.getReservedWord("end"));:}
              ;

ALLTYPES ::= TBAS:tbas          {: RESULT = tbas;:}
             | identifier:i     {: RESULT = htmlGenerator.getIdent(i);:}
             ;

/* ------------ SINTAXIS SENTENCIAS DE CONTROL DE FLUJO  ----------- */

                         /* SENTENCIA IF */

COND ::= if_t EXP:exp then_t {: htmlGenerator.sentCond = true; :} SENT:sent ELSECOND:elsecond {:
                                                            RESULT = htmlGenerator.getReservedWord("if ") + htmlGenerator.checkBool(exp) + htmlGenerator.getReservedWord(" then ") + sent + elsecond;:};

ELSECOND ::=                    {: RESULT = "";:}
            | else_t {: htmlGenerator.sentCond = true; :} SENT:sent  {: RESULT = htmlGenerator.getSent(htmlGenerator.getReservedWord("else ")) + sent;:}
            ;

                        /* SENTENCIA WHILE */

WLOOP ::= while_t EXP:exp do_t  {: htmlGenerator.sentCond = true; :} SENT:sent {: RESULT = htmlGenerator.getReservedWord("while ") + exp + htmlGenerator.getReservedWord(" do ") + sent;:};

                        /* SENTENCIA FOR  */

FLOOP ::= for_t identifier:i1 asig EXP:exp1 to EXP:exp2 do_t {: htmlGenerator.sentCond = true; :} SENT:sent {: RESULT = htmlGenerator.getReservedWord("for ") + htmlGenerator.getIdent(i1) +
                                                                                                               ":=" + exp1 + htmlGenerator.getReservedWord(" to ") + exp2 + htmlGenerator.getReservedWord(" do ") + sent;:};

                        /* SENTENCIA CASE */

CASE ::= case_t EXP:exp of {:htmlGenerator.indentLevel++;:} CASELIST:caselist end {:
                                                    htmlGenerator.indentLevel--;
                                                    RESULT = htmlGenerator.getReservedWord("case ") + exp + htmlGenerator.getReservedWord(" of ") +
                                                    caselist + htmlGenerator.getSent(htmlGenerator.getReservedWord("end"));:};

CASELIST ::= EXP:exp colons SENT:sent                     {: RESULT = htmlGenerator.getSent(exp + " : " + htmlGenerator.deleteTags(sent));:}
             | EXP:exp colons SENT:sent CASELIST:caselist {: RESULT = htmlGenerator.getSent(exp + " : " + htmlGenerator.deleteTags(sent)) + caselist;:}
             ;
