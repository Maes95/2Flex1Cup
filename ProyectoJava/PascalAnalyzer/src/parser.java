
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\152\000\002\002\007\000\002\002\004\000\002\053" +
    "\002\000\002\003\007\000\002\004\002\000\002\004\004" +
    "\000\002\054\002\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\055\002\000\002\006\004\000\002\056\002\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\057\002" +
    "\000\002\007\005\000\002\010\006\000\002\010\007\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\060\002\000\002\012\006\000\002\013\005\000\002\013" +
    "\007\000\002\014\003\000\002\014\005\000\002\061\002" +
    "\000\002\015\011\000\002\062\002\000\002\016\013\000" +
    "\002\017\002\000\002\017\005\000\002\020\005\000\002" +
    "\020\007\000\002\021\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\004\000\002\022\004\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\023\005\000\002\024\003\000\002" +
    "\024\006\000\002\024\005\000\002\025\005\000\002\025" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\003\000\002\032" +
    "\004\000\002\032\005\000\002\032\004\000\002\032\006" +
    "\000\002\032\005\000\002\033\002\000\002\033\005\000" +
    "\002\034\003\000\002\034\005\000\002\035\004\000\002" +
    "\063\002\000\002\036\007\000\002\037\002\000\002\037" +
    "\005\000\002\040\003\000\002\040\003\000\002\040\003" +
    "\000\002\064\002\000\002\041\005\000\002\042\006\000" +
    "\002\042\007\000\002\043\012\000\002\065\002\000\002" +
    "\043\006\000\002\044\003\000\002\044\003\000\002\066" +
    "\002\000\002\045\010\000\002\046\002\000\002\067\002" +
    "\000\002\046\005\000\002\070\002\000\002\047\007\000" +
    "\002\071\002\000\002\050\013\000\002\072\002\000\002" +
    "\051\010\000\002\052\005\000\002\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\004\004\001\002\000\004\061\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\030\010\001\002\000\020\003\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\022\ufffd\023\ufffd\024\ufffd\001\002\000\020" +
    "\003\023\005\016\007\025\010\020\022\ufff3\023\ufff5\024" +
    "\022\001\002\000\004\035\013\001\002\000\004\002\001" +
    "\001\002\000\004\022\277\001\002\000\020\003\ufffc\005" +
    "\ufffc\007\ufffc\010\ufffc\022\ufffc\023\ufffc\024\ufffc\001\002" +
    "\000\022\003\uffff\005\uffff\011\uffff\014\uffff\015\uffff\020" +
    "\uffff\030\uffff\061\uffff\001\002\000\004\023\112\001\002" +
    "\000\004\061\uffef\001\002\000\020\003\ufff1\005\ufff1\007" +
    "\ufff1\010\ufff1\022\ufff1\023\ufff1\024\ufff1\001\002\000\004" +
    "\061\uffad\001\002\000\020\003\ufff0\005\ufff0\007\ufff0\010" +
    "\ufff0\022\ufff0\023\ufff0\024\ufff0\001\002\000\020\003\ufff7" +
    "\005\ufff7\007\ufff7\010\ufff7\022\ufff7\023\ufff7\024\ufff7\001" +
    "\002\000\004\061\uffe8\001\002\000\020\003\ufff6\005\ufff6" +
    "\007\ufff6\010\ufff6\022\ufff6\023\ufff6\024\ufff6\001\002\000" +
    "\004\061\031\001\002\000\004\031\046\001\002\000\006" +
    "\031\uffe4\034\044\001\002\000\004\030\033\001\002\000" +
    "\024\003\uffe7\005\uffe7\007\uffe7\010\uffe7\022\uffe7\023\uffe7" +
    "\024\uffe7\030\uffe7\061\031\001\002\000\004\031\035\001" +
    "\002\000\012\025\041\026\042\027\036\061\040\001\002" +
    "\000\010\006\uffd8\030\uffd8\037\uffd8\001\002\000\010\006" +
    "\uffa6\030\uffa6\037\uffa6\001\002\000\010\006\uffa5\030\uffa5" +
    "\037\uffa5\001\002\000\010\006\uffda\030\uffda\037\uffda\001" +
    "\002\000\010\006\uffd9\030\uffd9\037\uffd9\001\002\000\006" +
    "\006\uffe5\030\uffe5\001\002\000\004\061\031\001\002\000" +
    "\004\031\uffe3\001\002\000\012\025\041\026\042\027\036" +
    "\061\040\001\002\000\006\006\uffe6\030\uffe6\001\002\000" +
    "\004\061\051\001\002\000\004\033\053\001\002\000\022" +
    "\003\uffac\005\uffac\007\uffac\010\uffac\022\uffac\023\uffac\024" +
    "\uffac\030\uffac\001\002\000\006\057\056\060\054\001\002" +
    "\000\004\061\uffa8\001\002\000\004\030\071\001\002\000" +
    "\004\040\057\001\002\000\010\044\062\045\060\046\061" +
    "\001\002\000\046\012\uffea\016\uffea\017\uffea\021\uffea\030" +
    "\uffea\031\uffea\034\uffea\037\uffea\041\uffea\042\uffea\047\uffea" +
    "\050\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\056" +
    "\uffea\001\002\000\046\012\uffe9\016\uffe9\017\uffe9\021\uffe9" +
    "\030\uffe9\031\uffe9\034\uffe9\037\uffe9\041\uffe9\042\uffe9\047" +
    "\uffe9\050\uffe9\051\uffe9\052\uffe9\053\uffe9\054\uffe9\055\uffe9" +
    "\056\uffe9\001\002\000\046\012\uffeb\016\uffeb\017\uffeb\021" +
    "\uffeb\030\uffeb\031\uffeb\034\uffeb\037\uffeb\041\uffeb\042\uffeb" +
    "\047\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055" +
    "\uffeb\056\uffeb\001\002\000\004\056\064\001\002\000\010" +
    "\044\062\045\060\046\061\001\002\000\004\041\066\001" +
    "\002\000\004\021\067\001\002\000\012\025\041\026\042" +
    "\027\036\061\040\001\002\000\004\030\uffa9\001\002\000" +
    "\024\003\uffab\005\uffab\007\uffab\010\uffab\022\uffab\023\uffab" +
    "\024\uffab\030\uffab\061\051\001\002\000\022\003\uffaa\005" +
    "\uffaa\007\uffaa\010\uffaa\022\uffaa\023\uffaa\024\uffaa\030\uffaa" +
    "\001\002\000\004\061\031\001\002\000\006\006\075\030" +
    "\076\001\002\000\004\030\uffa7\001\002\000\004\061\031" +
    "\001\002\000\004\061\100\001\002\000\004\033\106\001" +
    "\002\000\024\003\uffee\005\uffee\007\uffee\010\uffee\022\uffee" +
    "\023\uffee\024\uffee\030\uffee\061\102\001\002\000\004\033" +
    "\103\001\002\000\010\044\062\045\060\046\061\001\002" +
    "\000\004\030\105\001\002\000\024\003\uffec\005\uffec\007" +
    "\uffec\010\uffec\022\uffec\023\uffec\024\uffec\030\uffec\061\uffec" +
    "\001\002\000\010\044\062\045\060\046\061\001\002\000" +
    "\004\030\110\001\002\000\024\003\uffed\005\uffed\007\uffed" +
    "\010\uffed\022\uffed\023\uffed\024\uffed\030\uffed\061\uffed\001" +
    "\002\000\020\003\ufff4\005\ufff4\007\ufff4\010\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\001\002\000\004\061\113\001\002\000" +
    "\006\030\uffe2\036\uffe2\001\002\000\006\030\uffde\036\115" +
    "\001\002\000\004\061\031\001\002\000\004\030\117\001" +
    "\002\000\020\003\ufffd\005\ufffd\007\ufffd\010\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\001\002\000\004\030\121\001\002\000" +
    "\020\003\uffe1\005\uffe1\007\uffe1\010\uffe1\022\uffe1\023\uffe1" +
    "\024\uffe1\001\002\000\004\037\130\001\002\000\004\031" +
    "\124\001\002\000\012\025\041\026\042\027\036\061\040" +
    "\001\002\000\006\030\126\037\uffdc\001\002\000\004\061" +
    "\031\001\002\000\004\037\uffdb\001\002\000\006\030\uffdd" +
    "\031\uffdd\001\002\000\022\003\133\005\ufffb\011\ufffb\014" +
    "\ufffb\015\ufffb\020\ufffb\030\ufffb\061\ufffb\001\002\000\020" +
    "\005\uffb2\011\145\014\154\015\153\020\150\030\uffb2\061" +
    "\143\001\002\000\022\005\ufff8\006\ufff8\011\ufff8\014\ufff8" +
    "\015\ufff8\020\ufff8\030\ufff8\061\ufff8\001\002\000\022\005" +
    "\uffb2\006\137\011\145\014\154\015\153\020\150\030\uffb2" +
    "\061\143\001\002\000\006\005\265\030\266\001\002\000" +
    "\036\005\uffd2\006\uffd2\011\uffd2\013\uffd2\014\uffd2\015\uffd2" +
    "\020\uffd2\030\uffd2\036\uffd2\043\uffd2\044\uffd2\045\uffd2\046" +
    "\uffd2\061\uffd2\001\002\000\006\030\ufffe\035\ufffe\001\002" +
    "\000\022\005\ufff9\006\ufff9\011\ufff9\014\ufff9\015\ufff9\020" +
    "\ufff9\030\ufff9\061\ufff9\001\002\000\004\030\264\001\002" +
    "\000\036\005\uffd4\006\uffd4\011\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\020\uffd4\030\uffd4\036\uffd4\043\uffd4\044\uffd4\045\uffd4" +
    "\046\uffd4\061\uffd4\001\002\000\014\030\uffb9\032\uffcf\035" +
    "\256\036\210\040\257\001\002\000\004\032\254\001\002" +
    "\000\016\036\161\043\162\044\062\045\060\046\061\061" +
    "\156\001\002\000\036\005\uffd5\006\uffd5\011\uffd5\013\uffd5" +
    "\014\uffd5\015\uffd5\020\uffd5\030\uffd5\036\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\046\uffd5\061\uffd5\001\002\000\036\005\uffd1" +
    "\006\uffd1\011\uffd1\013\uffd1\014\uffd1\015\uffd1\020\uffd1\030" +
    "\uffd1\036\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\061\uffd1" +
    "\001\002\000\016\036\161\043\162\044\062\045\060\046" +
    "\061\061\156\001\002\000\036\005\uffd3\006\uffd3\011\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\020\uffd3\030\uffd3\036\uffd3\043" +
    "\uffd3\044\uffd3\045\uffd3\046\uffd3\061\uffd3\001\002\000\004" +
    "\030\232\001\002\000\004\061\222\001\002\000\016\036" +
    "\161\043\162\044\062\045\060\046\061\061\156\001\002" +
    "\000\044\012\uffcb\016\uffcb\017\uffcb\021\uffcb\030\uffcb\031" +
    "\uffcb\034\uffcb\037\uffcb\041\uffcb\042\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\053\uffcb\054\uffcb\055\uffcb\001\002\000" +
    "\052\012\uffb9\016\uffb9\017\uffb9\021\uffb9\030\uffb9\031\uffb9" +
    "\034\uffb9\035\206\036\210\037\uffb9\040\207\041\uffb9\042" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\052\uffb9\053\uffb9\054\uffb9" +
    "\055\uffb9\001\002\000\044\012\uffbf\016\uffbf\017\uffbf\021" +
    "\uffbf\030\uffbf\031\uffbf\034\uffbf\037\uffbf\041\uffbf\042\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055" +
    "\uffbf\001\002\000\024\017\203\042\166\047\174\050\173" +
    "\051\177\052\201\053\200\054\172\055\176\001\002\000" +
    "\016\036\161\043\162\044\062\045\060\046\061\061\156" +
    "\001\002\000\016\036\161\043\162\044\062\045\060\046" +
    "\061\061\156\001\002\000\044\012\uffbe\016\uffbe\017\uffbe" +
    "\021\uffbe\030\uffbe\031\uffbe\034\uffbe\037\uffbe\041\uffbe\042" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe" +
    "\055\uffbe\001\002\000\024\037\170\042\166\047\174\050" +
    "\173\051\177\052\201\053\200\054\172\055\176\001\002" +
    "\000\016\036\161\043\162\044\062\045\060\046\061\061" +
    "\156\001\002\000\016\036\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\046\uffc7\061\uffc7\001\002\000\016\036\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\061\uffc8\001\002\000\044\012\uffbd" +
    "\016\uffbd\017\uffbd\021\uffbd\030\uffbd\031\uffbd\034\uffbd\037" +
    "\uffbd\041\uffbd\042\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd" +
    "\053\uffbd\054\uffbd\055\uffbd\001\002\000\016\036\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\046\uffc9\061\uffc9\001\002\000\016" +
    "\036\uffc1\043\uffc1\044\uffc1\045\uffc1\046\uffc1\061\uffc1\001" +
    "\002\000\016\036\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5" +
    "\061\uffc5\001\002\000\016\036\uffc6\043\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\061\uffc6\001\002\000\016\036\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\061\uffca\001\002\000\016\036" +
    "\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\061\uffc0\001\002" +
    "\000\016\036\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\061" +
    "\uffc4\001\002\000\016\036\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\061\uffc2\001\002\000\016\036\uffc3\043\uffc3\044" +
    "\uffc3\045\uffc3\046\uffc3\061\uffc3\001\002\000\044\012\uffcc" +
    "\016\uffcc\017\uffcc\021\uffcc\030\uffcc\031\uffcc\034\uffcc\037" +
    "\uffcc\041\uffcc\042\166\047\174\050\173\051\177\052\201" +
    "\053\200\054\172\055\176\001\002\000\020\005\uff9f\011" +
    "\uff9f\014\uff9f\015\uff9f\020\uff9f\030\uff9f\061\uff9f\001\002" +
    "\000\020\005\uffb2\011\145\014\154\015\153\020\150\030" +
    "\uffb2\061\143\001\002\000\036\005\uff9e\006\uff9e\011\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\020\uff9e\030\uff9e\036\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\061\uff9e\001\002\000\004" +
    "\061\221\001\002\000\016\036\161\043\162\044\062\045" +
    "\060\046\061\061\156\001\002\000\016\036\161\043\162" +
    "\044\062\045\060\046\061\061\156\001\002\000\044\012" +
    "\uffbc\016\uffbc\017\uffbc\021\uffbc\030\uffbc\031\uffbc\034\uffbc" +
    "\037\uffbc\041\uffbc\042\uffbc\047\uffbc\050\uffbc\051\uffbc\052" +
    "\uffbc\053\uffbc\054\uffbc\055\uffbc\001\002\000\026\034\215" +
    "\037\uffb7\042\166\047\174\050\173\051\177\052\201\053" +
    "\200\054\172\055\176\001\002\000\004\037\214\001\002" +
    "\000\044\012\uffb8\016\uffb8\017\uffb8\021\uffb8\030\uffb8\031" +
    "\uffb8\034\uffb8\037\uffb8\041\uffb8\042\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\052\uffb8\053\uffb8\054\uffb8\055\uffb8\001\002\000" +
    "\016\036\161\043\162\044\062\045\060\046\061\061\156" +
    "\001\002\000\004\037\uffb6\001\002\000\024\041\220\042" +
    "\166\047\174\050\173\051\177\052\201\053\200\054\172" +
    "\055\176\001\002\000\044\012\uffbb\016\uffbb\017\uffbb\021" +
    "\uffbb\030\uffbb\031\uffbb\034\uffbb\037\uffbb\041\uffbb\042\uffbb" +
    "\047\uffbb\050\uffbb\051\uffbb\052\uffbb\053\uffbb\054\uffbb\055" +
    "\uffbb\001\002\000\044\012\uffba\016\uffba\017\uffba\021\uffba" +
    "\030\uffba\031\uffba\034\uffba\037\uffba\041\uffba\042\uffba\047" +
    "\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055\uffba" +
    "\001\002\000\004\032\223\001\002\000\016\036\161\043" +
    "\162\044\062\045\060\046\061\061\156\001\002\000\024" +
    "\016\225\042\166\047\174\050\173\051\177\052\201\053" +
    "\200\054\172\055\176\001\002\000\016\036\161\043\162" +
    "\044\062\045\060\046\061\061\156\001\002\000\024\017" +
    "\227\042\166\047\174\050\173\051\177\052\201\053\200" +
    "\054\172\055\176\001\002\000\020\005\uff9d\011\uff9d\014" +
    "\uff9d\015\uff9d\020\uff9d\030\uff9d\061\uff9d\001\002\000\020" +
    "\005\uffb2\011\145\014\154\015\153\020\150\030\uffb2\061" +
    "\143\001\002\000\036\005\uff9c\006\uff9c\011\uff9c\013\uff9c" +
    "\014\uff9c\015\uff9c\020\uff9c\030\uff9c\036\uff9c\043\uff9c\044" +
    "\uff9c\045\uff9c\046\uff9c\061\uff9c\001\002\000\036\005\uffd6" +
    "\006\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\020\uffd6\030" +
    "\uffd6\036\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\061\uffd6" +
    "\001\002\000\024\021\234\042\166\047\174\050\173\051" +
    "\177\052\201\053\200\054\172\055\176\001\002\000\016" +
    "\036\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\061\uff9b\001" +
    "\002\000\016\036\161\043\162\044\062\045\060\046\061" +
    "\061\156\001\002\000\004\006\243\001\002\000\024\031" +
    "\240\042\166\047\174\050\173\051\177\052\201\053\200" +
    "\054\172\055\176\001\002\000\020\005\uffb2\011\145\014" +
    "\154\015\153\020\150\030\uffb2\061\143\001\002\000\020" +
    "\006\uff99\036\161\043\162\044\062\045\060\046\061\061" +
    "\156\001\002\000\004\006\uff98\001\002\000\036\005\uff9a" +
    "\006\uff9a\011\uff9a\013\uff9a\014\uff9a\015\uff9a\020\uff9a\030" +
    "\uff9a\036\uff9a\043\uff9a\044\uff9a\045\uff9a\046\uff9a\061\uff9a" +
    "\001\002\000\024\012\245\042\166\047\174\050\173\051" +
    "\177\052\201\053\200\054\172\055\176\001\002\000\020" +
    "\005\uffa4\011\uffa4\014\uffa4\015\uffa4\020\uffa4\030\uffa4\061" +
    "\uffa4\001\002\000\020\005\uffb2\011\145\014\154\015\153" +
    "\020\150\030\uffb2\061\143\001\002\000\036\005\uffa2\006" +
    "\uffa2\011\uffa2\013\251\014\uffa2\015\uffa2\020\uffa2\030\uffa2" +
    "\036\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\061\uffa2\001" +
    "\002\000\036\005\uffa3\006\uffa3\011\uffa3\013\uffa3\014\uffa3" +
    "\015\uffa3\020\uffa3\030\uffa3\036\uffa3\043\uffa3\044\uffa3\045" +
    "\uffa3\046\uffa3\061\uffa3\001\002\000\020\005\uffa1\011\uffa1" +
    "\014\uffa1\015\uffa1\020\uffa1\030\uffa1\061\uffa1\001\002\000" +
    "\020\005\uffb2\011\145\014\154\015\153\020\150\030\uffb2" +
    "\061\143\001\002\000\036\005\uffa0\006\uffa0\011\uffa0\013" +
    "\uffa0\014\uffa0\015\uffa0\020\uffa0\030\uffa0\036\uffa0\043\uffa0" +
    "\044\uffa0\045\uffa0\046\uffa0\061\uffa0\001\002\000\016\036" +
    "\161\043\162\044\062\045\060\046\061\061\156\001\002" +
    "\000\024\030\uffd0\042\166\047\174\050\173\051\177\052" +
    "\201\053\200\054\172\055\176\001\002\000\004\061\263" +
    "\001\002\000\016\036\161\043\162\044\062\045\060\046" +
    "\061\061\156\001\002\000\004\030\uffb5\001\002\000\024" +
    "\041\262\042\166\047\174\050\173\051\177\052\201\053" +
    "\200\054\172\055\176\001\002\000\004\032\uffce\001\002" +
    "\000\004\032\uffcd\001\002\000\036\005\uffd7\006\uffd7\011" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\020\uffd7\030\uffd7\036\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\046\uffd7\061\uffd7\001\002\000" +
    "\022\003\uffb4\005\uffb4\011\uffb4\014\uffb4\015\uffb4\020\uffb4" +
    "\030\uffb4\061\uffb4\001\002\000\010\007\025\010\020\024" +
    "\022\001\002\000\006\005\uffaf\030\uffaf\001\002\000\006" +
    "\005\uffae\030\uffae\001\002\000\006\005\uffb1\030\uffb1\001" +
    "\002\000\006\005\uffb0\030\uffb0\001\002\000\022\003\133" +
    "\005\ufffb\011\ufffb\014\ufffb\015\ufffb\020\ufffb\030\ufffb\061" +
    "\ufffb\001\002\000\022\005\uffb2\006\275\011\145\014\154" +
    "\015\153\020\150\030\uffb2\061\143\001\002\000\036\005" +
    "\uffb3\006\uffb3\011\uffb3\013\uffb3\014\uffb3\015\uffb3\020\uffb3" +
    "\030\uffb3\036\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\061" +
    "\uffb3\001\002\000\022\005\ufffa\006\ufffa\011\ufffa\014\ufffa" +
    "\015\ufffa\020\ufffa\030\ufffa\061\ufffa\001\002\000\004\061" +
    "\301\001\002\000\020\003\ufff2\005\ufff2\007\ufff2\010\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\001\002\000\006\031\uffe0\036" +
    "\uffe0\001\002\000\006\031\uffde\036\115\001\002\000\004" +
    "\031\304\001\002\000\012\025\041\026\042\027\036\061" +
    "\040\001\002\000\004\030\306\001\002\000\020\003\ufffd" +
    "\005\ufffd\007\ufffd\010\ufffd\022\ufffd\023\ufffd\024\ufffd\001" +
    "\002\000\004\030\310\001\002\000\020\003\uffdf\005\uffdf" +
    "\007\uffdf\010\uffdf\022\uffdf\023\uffdf\024\uffdf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\306\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\010\001\001\000\016\006\014\007\023\012" +
    "\025\041\020\055\016\056\013\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\277\001\001\000\002\001" +
    "\001\000\004\053\130\001\001\000\004\015\110\001\001" +
    "\000\004\057\076\001\001\000\002\001\001\000\004\064" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\026\001\001\000\002\001\001\000\006\013\031\014" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\033\001\001\000\002\001\001\000" +
    "\006\021\036\044\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\044\001\001\000\002" +
    "\001\001\000\006\021\036\044\046\001\001\000\002\001" +
    "\001\000\004\042\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\054\001\001\000\004\065\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\036\044\067\001" +
    "\001\000\002\001\001\000\004\042\071\001\001\000\002" +
    "\001\001\000\006\013\073\014\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\033\001\001\000\004" +
    "\010\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\103\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\061\113\001\001\000\004\017\115\001\001\000" +
    "\006\014\122\020\121\001\001\000\002\001\001\000\006" +
    "\003\117\004\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\036" +
    "\044\124\001\001\000\002\001\001\000\006\014\122\020" +
    "\126\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\133\054\131\001\001\000\026\022\275\023\140\024" +
    "\143\035\151\036\145\037\134\045\141\047\150\050\135" +
    "\051\146\001\001\000\002\001\001\000\026\022\137\023" +
    "\140\024\143\035\151\036\145\037\134\045\141\047\150" +
    "\050\135\051\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\033\257\001\001\000\002\001" +
    "\001\000\010\011\156\025\243\032\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\156\025\232\032" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\156\025\157\032\154\001\001\000" +
    "\002\001\001\000\004\033\210\001\001\000\002\001\001" +
    "\000\012\026\164\027\174\030\166\031\170\001\001\000" +
    "\010\011\156\025\163\032\154\001\001\000\006\011\156" +
    "\032\162\001\001\000\002\001\001\000\012\026\164\027" +
    "\174\030\166\031\170\001\001\000\010\011\156\025\201" +
    "\032\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\164\027\174\030\166\031\170\001\001\000" +
    "\004\070\203\001\001\000\026\022\204\023\140\024\143" +
    "\035\151\036\145\037\134\045\141\047\150\050\135\051" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\156\025\216\032\154\001\001\000\012\011\156\025" +
    "\211\032\154\034\212\001\001\000\002\001\001\000\012" +
    "\026\164\027\174\030\166\031\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\156\025\211\032\154" +
    "\034\215\001\001\000\002\001\001\000\012\026\164\027" +
    "\174\030\166\031\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\156\025\223\032" +
    "\154\001\001\000\012\026\164\027\174\030\166\031\170" +
    "\001\001\000\010\011\156\025\225\032\154\001\001\000" +
    "\012\026\164\027\174\030\166\031\170\001\001\000\004" +
    "\071\227\001\001\000\026\022\230\023\140\024\143\035" +
    "\151\036\145\037\134\045\141\047\150\050\135\051\146" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\164\027\174\030\166\031\170\001\001\000\004\072\234" +
    "\001\001\000\012\011\156\025\236\032\154\052\235\001" +
    "\001\000\002\001\001\000\012\026\164\027\174\030\166" +
    "\031\170\001\001\000\026\022\240\023\140\024\143\035" +
    "\151\036\145\037\134\045\141\047\150\050\135\051\146" +
    "\001\001\000\012\011\156\025\236\032\154\052\241\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\026\164" +
    "\027\174\030\166\031\170\001\001\000\004\066\245\001" +
    "\001\000\026\022\246\023\140\024\143\035\151\036\145" +
    "\037\134\045\141\047\150\050\135\051\146\001\001\000" +
    "\004\046\247\001\001\000\002\001\001\000\004\067\251" +
    "\001\001\000\026\022\252\023\140\024\143\035\151\036" +
    "\145\037\134\045\141\047\150\050\135\051\146\001\001" +
    "\000\002\001\001\000\010\011\156\025\254\032\154\001" +
    "\001\000\012\026\164\027\174\030\166\031\170\001\001" +
    "\000\002\001\001\000\010\011\156\025\260\032\154\001" +
    "\001\000\002\001\001\000\012\026\164\027\174\030\166" +
    "\031\170\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\063\272\001\001\000\012\007\271" +
    "\012\266\040\270\041\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\005\273\054\131\001\001\000\026\022\137\023\140\024" +
    "\143\035\151\036\145\037\134\045\141\047\150\050\135" +
    "\051\146\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\062\301\001\001" +
    "\000\004\017\302\001\001\000\002\001\001\000\006\021" +
    "\036\044\304\001\001\000\002\001\001\000\006\003\306" +
    "\004\010\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  // INIT CODE
  // Codigo para inicializar
  System.out.println("---------------------------------------------------------------------\n"
                    +"|       ANALIZADOR LEXICO Y SINTACTICO PARA LEGUAJE PASCAL          |\n"
                    +"---------------------------------------------------------------------\n");
  this.stack = new Stack<>();
  this.htmlGenerator = new HTMLGenerator(this.fileName);

    }



    Stack<Regla> stack; // Pila donde se almacenan las reglas que se han reducido

    HTMLGenerator htmlGenerator;

    public String fileName;

    public void report_error(String mensajeError, Object token) {

                 StringBuilder salidaError = new StringBuilder("ERROR SINTACTICO: ");

                 if (token instanceof java_cup.runtime.Symbol) {

                     java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) token);

                     if (s.left >= 0) {
                         salidaError.append(" en la linea "+(s.left + 1));
                         if (s.right >= 0)
                             salidaError.append(", columna "+(s.right));
                     }

                     if (s.value != null){
                         salidaError.append(". No se esperaba el token <"+s.value.toString()+">");
                     }

                 }

        salidaError.append(" : " + mensajeError);

        System.err.println(salidaError);
    }

    /* Método para errores irrecuperables */

    public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
      report_fatal_error("El analizador no pudo recuperarse del error sintactico", token);
    }

    public void report_fatal_error(String mensajeError, Object token) {
        mensajeError = "Error sintactico irrecuperable\n" + mensajeError;
        report_error(mensajeError, token);
        System.exit(1);
    }

    /* Método para errores recuperables */

    public void syntax_error(Symbol token) {
      report_error("Se procedera a intentar continuar con el analisis sintactico", token);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  // ACTION CODE
  // Codigo para métodos
  public void pushRegla(String cadena){
    //System.out.println(cadena);
    Regla regla = new Regla(cadena);
    stack.push(regla);
  }

  public void mostrarArbol(String cadena){
    System.out.println(cadena + "\n");
    Regla regla = new Regla(cadena);
    stack.push(regla);
    System.out.println("---------------------------------------------------------------------\n"
                      +"|                    ARBOL SINTACTICO GENERADO                      |\n"
                      +"---------------------------------------------------------------------\n");
    System.out.println("_" + regla.antecedente);
    //Regla.printSyntacticTree(stack, ""); // Pinta el arbol sintáctico (ver clase "Regla")
  }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= program identifier semicolons BLQ point 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 mostrarArbol("PRG <%program "+i1+" ; BLQ .%>");
                                                         htmlGenerator.closeHTML(i1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              String RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dcllist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin NT$0 SENTLIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dcllist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 htmlGenerator.indentLevel--;
                                                      pushRegla("BLQ <%DCLLIST begin SENTLIST end%>");
                                                      htmlGenerator.getMainProgram(sentlist);
                                                      RESULT = dcllist + htmlGenerator.getReservedWord("begin") + sentlist + htmlGenerator.getReservedWord("end");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= 
            {
              String RESULT =null;
		 pushRegla("DCLLIST <%lambda%>");
                                       RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= DCLLIST DCL 
            {
              String RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dcllist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dcl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCLLIST <%DCLLIST DCL%>");
                                       RESULT = dcllist + (String)dcl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =null;
 htmlGenerator.sentCond = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= NT$1 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENTLIST <%SENT%>"); // Hay mas de una sentencia
                                                                  RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENTLIST SENT 
            {
              String RESULT =null;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENTLIST <%SENTLIST SENT%>");
                                           RESULT = sentlist + (String)sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFCTE 
            {
              String RESULT =null;
		int defcteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defcteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defcte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL <%DEFCTE%>");
                          htmlGenerator.updateLastDcl(defcte);
                          RESULT = defcte;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFVAR 
            {
              String RESULT =null;
		int defvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defvar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL <%DEFVAR%>");
                          htmlGenerator.updateLastDcl(defvar);
                          RESULT = defvar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NT$2 ::= 
            {
              String RESULT =null;
 htmlGenerator.inProcFun = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= NT$2 DEFPROC 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int defprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defproc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 htmlGenerator.inProcFun = false;pushRegla("DCL <%DEFPROC%>"); // TODO
                           RESULT = defproc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NT$3 ::= 
            {
              String RESULT =null;
 htmlGenerator.inProcFun = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DCL ::= NT$3 DEFFUN 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int deffunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deffunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deffun = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 htmlGenerator.inProcFun = false;pushRegla("DCL <%DEFFUN%>");
                          RESULT = deffun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DCL ::= DEFTYPE 
            {
              String RESULT =null;
		int deftypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deftyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deftype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL <%DEFTYPE%>");
                           htmlGenerator.updateLastDcl(deftype);
                           RESULT = deftype;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DCL ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NT$4 ::= 
            {
              String RESULT =null;
 htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DEFCTE ::= const_t NT$4 CTELIST 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ctelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 htmlGenerator.indentLevel--;
                                                                      pushRegla("DEFCTE <%const CTELIST%>");
                                                                      RESULT = htmlGenerator.getReservedWord("const") + ctelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CTELIST ::= identifier equal SIMPVALUE semicolons 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String simpvalue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("CTELIST <%" +i1+" = SIMPVALUE ;%>");
                                                                 RESULT = htmlGenerator.getSent(htmlGenerator.getIdentDeclaration(i1) + "=" + simpvalue + ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CTELIST ::= CTELIST identifier equal SIMPVALUE semicolons 
            {
              String RESULT =null;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ctelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String simpvalue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("CTELIST <%CTELIST "+i2+" = SIMPVALUE ;%>");
                                                                                  RESULT = (String)ctelist + htmlGenerator.getSent(htmlGenerator.getIdent(i2) + "=" + (String)simpvalue + ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SIMPVALUE ::= decimal_value 
            {
              String RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SIMVALUE <%" + dv + "%>" );
                                    RESULT = htmlGenerator.getConst(dv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SIMPVALUE ::= hexadecimal_value 
            {
              String RESULT =null;
		int hvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String hv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SIMVALUE <%" + hv + "%>");
                                    RESULT = htmlGenerator.getConst(hv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SIMPVALUE ::= string_literal 
            {
              String RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SIMVALUE <%" + sl + "%>");
                                    RESULT = htmlGenerator.getConst(sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$5 ::= 
            {
              String RESULT =null;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEFVAR ::= var NT$5 DEFVARLIST semicolons 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String defvarlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                  htmlGenerator.indentLevel--;
                                                  pushRegla("DEFVAR <%var DEFVARLIST ;%>");
                                                  RESULT = htmlGenerator.getReservedWord("var <br/>") + defvarlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFVARLIST ::= VARLIST colons ALLTYPES 
            {
              String RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DEFVARLIST <%VARLIST : ALLTYPES%>");
                                                                                            htmlGenerator.pushVar(varlist, alltypes);
                                                                                            RESULT = htmlGenerator.getSent(varlist + " : " + alltypes + "; ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFVARLIST ::= DEFVARLIST semicolons VARLIST colons ALLTYPES 
            {
              String RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String defvarlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DEFVARLIST <%DEFVARLIST ; VARLIST : ALLTYPES%>");
                                                                                            htmlGenerator.pushVar(varlist, alltypes);
                                                                                            RESULT = defvarlist + htmlGenerator.getSent(varlist + " : " + alltypes + "; ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // VARLIST ::= identifier 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("VARLIST <%" + i1 + "%>");
                                                    RESULT = htmlGenerator.getIdentDeclaration(i1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // VARLIST ::= identifier comma VARLIST 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("VARLIST <%"+ i2 +" , VARLIST%>");
                                                    RESULT = htmlGenerator.getIdentDeclaration(i2) + "," + varlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$6 ::= 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 htmlGenerator.addMethod(i1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEFPROC ::= procedure identifier NT$6 FORMAL_PARAMLIST semicolons BLQ semicolons 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int formal_paramlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formal_paramlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String formal_paramlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    pushRegla("DEFPROC <%procedure "+ i1 +" FORMAL_PARAMLIST ; BLQ ;%>");
                    RESULT = htmlGenerator.getProc(i1, formal_paramlist, blq);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // NT$7 ::= 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 htmlGenerator.addMethod(i2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFFUN ::= function identifier NT$7 FORMAL_PARAMLIST colons ALLTYPES semicolons BLQ semicolons 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int formal_paramlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int formal_paramlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String formal_paramlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    pushRegla("DEFFUN <%function "+i2+" FORMAL_PARAMLIST : ALLTYPES ; BLQ ;%>");
                    RESULT = htmlGenerator.getFunc(i2, formal_paramlist, alltypes, blq);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FORMAL_PARAMLIST ::= 
            {
              String RESULT =null;
		 pushRegla("FORMAL_PARAMLIST <%lambda%>");
                                                                              RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FORMAL_PARAMLIST ::= open_bracket FORMAL_PARAM close_bracket 
            {
              String RESULT =null;
		int formal_paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formal_paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String formal_param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("FORMAL_PARAMLIST <%( FORMAL_PARAM )%>");
                                                                              RESULT = "(" + formal_param + ")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // FORMAL_PARAM ::= VARLIST colons ALLTYPES 
            {
              String RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FORMAL_PARAM <%VARLIST : ALLTYPES%>");
                                                                                                  RESULT = varlist + ":" + alltypes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FORMAL_PARAM ::= VARLIST colons ALLTYPES semicolons FORMAL_PARAM 
            {
              String RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int formal_paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int formal_paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String formal_param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FORMAL_PARAM <%VARLIST : ALLTYPES ; FORMAL_PARAM%>");
                                                                                                  RESULT = varlist + ":" + alltypes + ";" + formal_param;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TBAS ::= int_name 
            {
              String RESULT =null;
		 pushRegla("TBAS <%INTEGER%>");
                       RESULT = htmlGenerator.getReservedWord(" INTEGER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TBAS ::= real_name 
            {
              String RESULT =null;
		 pushRegla("TBAS <%REAL%>");
                       RESULT = htmlGenerator.getReservedWord(" REAL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TBAS ::= char_name 
            {
              String RESULT =null;
		 pushRegla("TBAS <%CHAR%>");
                       RESULT = htmlGenerator.getReservedWord(" CHARACTER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= ASIG semicolons 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("SENT <%ASIG ;%>");
                                             RESULT = htmlGenerator.getSent(asig + ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= PROC_CALL semicolons 
            {
              String RESULT =null;
		int proc_callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int proc_callright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String proc_call = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("SENT <%PROC_CALL ;%>");
                                             RESULT = htmlGenerator.getSent(proc_call + ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT ::= EXEBLQ 
            {
              String RESULT =null;
		int exeblqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exeblqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exeblq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%EXEBLQ%>");
                                             RESULT = exeblq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENT ::= COND 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%COND%>");
                                             RESULT = htmlGenerator.getSent(cond);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENT ::= WLOOP 
            {
              String RESULT =null;
		int wloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String wloop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%WLOOP%>");
                                             RESULT = htmlGenerator.getSent(wloop);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENT ::= FLOOP 
            {
              String RESULT =null;
		int floopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int floopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String floop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%FLOOP%>");
                                             RESULT = htmlGenerator.getSent(floop);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENT ::= CASE 
            {
              String RESULT =null;
		int case_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int case_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String case_t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%CASE%>");
                                             RESULT = htmlGenerator.getSent(case_t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ASIG ::= ID asig EXP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ASIG <%ID := EXP%>");
                              RESULT = htmlGenerator.checkAsig(id,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ID ::= identifier 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ID <%"+i1+"%>");
                                                                          RESULT = htmlGenerator.getIdent(i1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ID ::= identifier open_square_bracket EXP close_square_bracket 
            {
              String RESULT =null;
		int i4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("ID <%"+i4+" [ EXP ]%>");
                                                                          RESULT = htmlGenerator.getIdent(i4) + "[ " + exp + " ]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ID ::= identifier point identifier 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ID <%"+i2+" . "+i3+"%>");
                                                                          RESULT = htmlGenerator.getIdent(i2) + "." + htmlGenerator.getIdent(i3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= EXP OP EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("EXP <%EXP OP EXP%>");
                                  RESULT = (String)exp1 + op + (String)exp2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= FACTOR 
            {
              String RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String factor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("EXP <%FACTOR%>");
                                  RESULT = factor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP ::= OPCOMP 
            {
              String RESULT =null;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opcomp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("OP <%OPCOMP%>");
                         RESULT = opcomp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OP ::= OPLOG 
            {
              String RESULT =null;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oplog = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("OP <%OPLOG%>");
                         RESULT = oplog;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OP ::= OPARIT 
            {
              String RESULT =null;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oparit = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("OP <%OPARIT%>");
                         RESULT = oparit;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPCOMP ::= comparator_op 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("OPCOMP <%"+op+"%>");
                              RESULT = " "+op+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPARIT ::= plus 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%+%>");
                        RESULT = " + ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPARIT ::= minus 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%-%>");
                        RESULT = " - ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPARIT ::= product 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%*%>");
                        RESULT = " * ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPARIT ::= div_op 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%div%>");
                        RESULT = " div ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPARIT ::= mod_op 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%mod%>");
                        RESULT = " mod ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPLOG ::= and_op 
            {
              String RESULT =null;
		 pushRegla("OPLOG <%and%>");
                      RESULT = " and ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPLOG ::= or_op 
            {
              String RESULT =null;
		 pushRegla("OPLOG <%or%>");
                      RESULT = " or ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FACTOR ::= SIMPVALUE 
            {
              String RESULT =null;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simpvalue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FACTOR <%SIMPVALUE%>");
                                                                                RESULT = simpvalue;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FACTOR ::= not_op FACTOR 
            {
              String RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String factor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FACTOR <%not FACTOR%>");
                                                                                RESULT = "not" + factor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FACTOR ::= open_bracket EXP close_bracket 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("FACTOR <%( EXP )%>");
                                                                                RESULT = "(" + exp + ")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FACTOR ::= identifier SUBPARAMLIST 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String subparamlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FACTOR <%"+i1+" SUBPARAMLIST%>");
                                                                                RESULT = htmlGenerator.getIdent(i1) + (String)subparamlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FACTOR ::= identifier open_square_bracket EXP close_square_bracket 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("FACTOR <%"+i2+" [ EXP ]%>");
                                                                                RESULT = htmlGenerator.getIdent(i2) + "[" + exp + "]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FACTOR ::= identifier point identifier 
            {
              String RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FACTOR <%"+i3+" . "+i4+"%>");
                                                                                RESULT = htmlGenerator.getIdent(i3) + "." + htmlGenerator.getIdent(i4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SUBPARAMLIST ::= 
            {
              String RESULT =null;
		 pushRegla("SUBPARAMLIST <%lambda%>");
                                                                RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SUBPARAMLIST ::= open_bracket EXPLIST close_bracket 
            {
              String RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String explist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("SUBPARAMLIST <%( EXPLIST )%>");
                                                                RESULT = " (" + explist + ") ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPLIST ::= EXP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("EXPLIST <%EXP%>");
                                             RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPLIST ::= EXP comma EXPLIST 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String explist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("EXPLIST <%EXP , EXPLIST%>");
                                             RESULT = exp + "," + explist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String subparamlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("PROC_CALL <%"+i1+" SUBPARAMLIST%>");
                                                        RESULT = htmlGenerator.getIdent(i1) + (String)subparamlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$8 ::= 
            {
              String RESULT =null;
		int dcllist_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllist_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dcllist_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXEBLQ ::= DCLLIST_BLQ begin NT$8 SENTLIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcllist_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dcllist_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dcllist_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                 htmlGenerator.indentLevel--;
                                                                 pushRegla("EXEBLQ <%DCLLIST_BLQ begin SENTLIST end%>");
                                                                 RESULT = dcllist_blq + htmlGenerator.getReservedWordIdent("begin") + sentlist + htmlGenerator.getReservedWordIdent("end");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DCLLIST_BLQ ::= 
            {
              String RESULT =null;
		 pushRegla("DCLLIST_BLQ <%lambda%>");
                                                    RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DCLLIST_BLQ ::= DCLLIST_BLQ semicolons DCL_BLQ 
            {
              String RESULT =null;
		int dcllist_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dcllist_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dcllist_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcl_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcl_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dcl_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCLLIST_BLQ <%DCLLIST_BLQ ; DCL_BLQ%>");
                                                                        RESULT = dcllist_blq + ";" + dcl_blq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DCL_BLQ ::= DEFCTE 
            {
              String RESULT =null;
		int defcteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defcteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defcte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL_BLQ <%DEFCTE%>");
                                RESULT = defcte;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DCL_BLQ ::= DEFVAR 
            {
              String RESULT =null;
		int defvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defvar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL_BLQ <%DEFVAR%>");
                                RESULT = defvar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DCL_BLQ ::= DEFTYPE 
            {
              String RESULT =null;
		int deftypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deftyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deftype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL_BLQ <%DEFTYPE%>");
                                RESULT = deftype;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$9 ::= 
            {
              String RESULT =null;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DEFTYPE ::= type NT$9 TYPELIST 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String typelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DEFTYPE <%type TYPELIST%>");
                                                                      htmlGenerator.indentLevel--;
                                                                      RESULT = htmlGenerator.getReservedWord("type ") + typelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // TYPELIST ::= identifier equal UDTYPE semicolons 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int udtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int udtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String udtype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("TYPELIST <%"+i1+" = UDTYPE ;%>");
                                                                                   htmlGenerator.pushType(i1);
                                                                                   RESULT =  htmlGenerator.getSent(htmlGenerator.getIdentDeclaration(i1) + " = " + udtype + htmlGenerator.getSentClose(";"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // TYPELIST ::= identifier equal UDTYPE semicolons TYPELIST 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int udtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int udtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String udtype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String typelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("TYPELIST <%"+i2+" = UDTYPE ; TYPELIST%>");
                                                                                   htmlGenerator.pushType(i2);
                                                                                   RESULT =  htmlGenerator.getSent(htmlGenerator.getIdentDeclaration(i2) + " = " + udtype + htmlGenerator.getSentClose(";")) + typelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // UDTYPE ::= array open_square_bracket SIMPVALUE two_points SIMPVALUE close_square_bracket of ALLTYPES 
            {
              String RESULT =null;
		int simpvalue1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int simpvalue1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String simpvalue1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int simpvalue2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int simpvalue2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String simpvalue2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    pushRegla("UDTYPE <%array [ SIMPVALUE .. SIMPVALUE ] of ALLTYPES%>");
                    RESULT = htmlGenerator.getReservedWord("array ") + "[ " + htmlGenerator.checkRange(simpvalue1,simpvalue2) + " ]" + htmlGenerator.getReservedWord(" of ") + alltypes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$10 ::= 
            {
              String RESULT =null;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // UDTYPE ::= record NT$10 DEFVARLIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String defvarlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    htmlGenerator.indentLevel--;
                    pushRegla("UDTYPE <%record DEFVARLIST end%>");
                    RESULT = htmlGenerator.getReservedWord("record ") + defvarlist + htmlGenerator.getSentOpen(htmlGenerator.getReservedWord("end"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ALLTYPES ::= TBAS 
            {
              String RESULT =null;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tbas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ALLTYPES <%TBAS%>");
                                   RESULT = tbas;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ALLTYPES ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ALLTYPES <%"+i+"%>");
                                RESULT = htmlGenerator.getIdent(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$11 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // COND ::= if_t EXP then_t NT$11 SENT ELSECOND 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String elsecond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("COND <%if EXP then SENT ELSECOND%>");
                                                            RESULT = htmlGenerator.getReservedWord("if ") + htmlGenerator.checkBool(exp) + htmlGenerator.getReservedWord(" then ") + sent + elsecond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELSECOND ::= 
            {
              String RESULT =null;
		 pushRegla("ELSECOND <%lambda%>");
                                   RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$12 ::= 
            {
              String RESULT =null;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ELSECOND ::= else_t NT$12 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ELSECOND <%else SENT%>");
                                                                        RESULT = htmlGenerator.getSent(htmlGenerator.getReservedWord("else ")) + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$13 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WLOOP ::= while_t EXP do_t NT$13 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("WLOOP <%while EXP do SENT%>");
                                                                                  RESULT = htmlGenerator.getReservedWord("while ") + exp + htmlGenerator.getReservedWord(" do ") + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$14 ::= 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",55, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // FLOOP ::= for_t identifier asig EXP to EXP do_t NT$14 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FLOOP <%for "+i1+" := EXP to EXP do SENT%>");
                                                                                                               RESULT = htmlGenerator.getReservedWord("for ") + htmlGenerator.getIdent(i1) +
                                                                                                               ":=" + exp1 + htmlGenerator.getReservedWord(" to ") + exp2 + htmlGenerator.getReservedWord(" do ") + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$15 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",56, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CASE ::= case_t EXP of NT$15 CASELIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caselistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caselistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String caselist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                    htmlGenerator.indentLevel--;
                                                    pushRegla("CASE <%case EXP of CASELIST end%>");
                                                    RESULT = htmlGenerator.getReservedWord("case ") + exp + htmlGenerator.getReservedWord(" of ") +
                                                    caselist + htmlGenerator.getSent(htmlGenerator.getReservedWord("end"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CASELIST ::= EXP colons SENT 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("CASELIST <%EXP : SENT%>");
                                                             RESULT = htmlGenerator.getSent(exp + " : " + htmlGenerator.deleteTags(sent));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CASELIST ::= EXP colons SENT CASELIST 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caselistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caselistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String caselist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("CASELIST <%EXP : SENT CASELIST%>");
                                                             RESULT = htmlGenerator.getSent(exp + " : " + htmlGenerator.deleteTags(sent)) + caselist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
