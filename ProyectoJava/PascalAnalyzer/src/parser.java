
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\140\000\002\002\007\000\002\002\004\000\002\053" +
    "\002\000\002\003\007\000\002\004\002\000\002\004\004" +
    "\000\002\054\002\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\004\000\002\010\006\000\002\010\007" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\012\005\000\002\013\005\000\002\013\007\000\002" +
    "\014\003\000\002\014\005\000\002\015\010\000\002\016" +
    "\012\000\002\017\002\000\002\017\005\000\002\020\005" +
    "\000\002\020\007\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\004\000\002\022\004\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\023\005\000\002\024\003" +
    "\000\002\024\006\000\002\024\005\000\002\025\005\000" +
    "\002\025\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\027\003\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\003\000\002\031\003\000\002\032\003\000" +
    "\002\032\004\000\002\032\005\000\002\032\004\000\002" +
    "\032\006\000\002\032\005\000\002\033\002\000\002\033" +
    "\005\000\002\034\003\000\002\034\005\000\002\035\004" +
    "\000\002\055\002\000\002\036\007\000\002\037\002\000" +
    "\002\037\005\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\041\004\000\002\042\006\000\002\042" +
    "\007\000\002\043\012\000\002\043\005\000\002\044\003" +
    "\000\002\044\003\000\002\056\002\000\002\045\010\000" +
    "\002\046\002\000\002\046\004\000\002\057\002\000\002" +
    "\047\007\000\002\060\002\000\002\050\013\000\002\051" +
    "\007\000\002\052\005\000\002\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\004\004\001\002\000\004\061\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\030\010\001\002\000\020\003\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\022\ufffd\023\ufffd\024\ufffd\001\002\000\020" +
    "\003\024\005\016\007\030\010\017\022\020\023\014\024" +
    "\023\001\002\000\004\035\013\001\002\000\004\002\001" +
    "\001\002\000\004\061\272\001\002\000\020\003\ufffc\005" +
    "\ufffc\007\ufffc\010\ufffc\022\ufffc\023\ufffc\024\ufffc\001\002" +
    "\000\022\003\uffff\005\uffff\011\uffff\014\uffff\015\uffff\020" +
    "\uffff\030\uffff\061\uffff\001\002\000\004\061\115\001\002" +
    "\000\004\061\076\001\002\000\020\003\ufff5\005\ufff5\007" +
    "\ufff5\010\ufff5\022\ufff5\023\ufff5\024\ufff5\001\002\000\020" +
    "\003\ufff3\005\ufff3\007\ufff3\010\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\001\002\000\004\061\051\001\002\000\020\003\ufff2" +
    "\005\ufff2\007\ufff2\010\ufff2\022\ufff2\023\ufff2\024\ufff2\001" +
    "\002\000\020\003\ufff4\005\ufff4\007\ufff4\010\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\001\002\000\020\003\ufff7\005\ufff7\007" +
    "\ufff7\010\ufff7\022\ufff7\023\ufff7\024\ufff7\001\002\000\020" +
    "\003\ufff6\005\ufff6\007\ufff6\010\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\001\002\000\004\061\032\001\002\000\004\031\047" +
    "\001\002\000\006\031\uffe8\034\045\001\002\000\004\030" +
    "\034\001\002\000\024\003\uffeb\005\uffeb\007\uffeb\010\uffeb" +
    "\022\uffeb\023\uffeb\024\uffeb\030\uffeb\061\032\001\002\000" +
    "\004\031\036\001\002\000\012\025\042\026\043\027\037" +
    "\061\041\001\002\000\010\006\uffde\030\uffde\037\uffde\001" +
    "\002\000\010\006\uffae\030\uffae\037\uffae\001\002\000\010" +
    "\006\uffad\030\uffad\037\uffad\001\002\000\010\006\uffe0\030" +
    "\uffe0\037\uffe0\001\002\000\010\006\uffdf\030\uffdf\037\uffdf" +
    "\001\002\000\006\006\uffe9\030\uffe9\001\002\000\004\061" +
    "\032\001\002\000\004\031\uffe7\001\002\000\012\025\042" +
    "\026\043\027\037\061\041\001\002\000\006\006\uffea\030" +
    "\uffea\001\002\000\004\033\053\001\002\000\022\003\uffb3" +
    "\005\uffb3\007\uffb3\010\uffb3\022\uffb3\023\uffb3\024\uffb3\030" +
    "\uffb3\001\002\000\006\057\056\060\054\001\002\000\004" +
    "\061\032\001\002\000\004\030\071\001\002\000\004\040" +
    "\057\001\002\000\010\044\062\045\060\046\061\001\002" +
    "\000\046\012\uffed\016\uffed\017\uffed\021\uffed\030\uffed\031" +
    "\uffed\034\uffed\037\uffed\041\uffed\042\uffed\047\uffed\050\uffed" +
    "\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed\001" +
    "\002\000\046\012\uffec\016\uffec\017\uffec\021\uffec\030\uffec" +
    "\031\uffec\034\uffec\037\uffec\041\uffec\042\uffec\047\uffec\050" +
    "\uffec\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec" +
    "\001\002\000\046\012\uffee\016\uffee\017\uffee\021\uffee\030" +
    "\uffee\031\uffee\034\uffee\037\uffee\041\uffee\042\uffee\047\uffee" +
    "\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee\056" +
    "\uffee\001\002\000\004\056\064\001\002\000\010\044\062" +
    "\045\060\046\061\001\002\000\004\041\066\001\002\000" +
    "\004\021\067\001\002\000\012\025\042\026\043\027\037" +
    "\061\041\001\002\000\004\030\uffb0\001\002\000\024\003" +
    "\uffb2\005\uffb2\007\uffb2\010\uffb2\022\uffb2\023\uffb2\024\uffb2" +
    "\030\uffb2\061\051\001\002\000\022\003\uffb1\005\uffb1\007" +
    "\uffb1\010\uffb1\022\uffb1\023\uffb1\024\uffb1\030\uffb1\001\002" +
    "\000\006\006\074\030\075\001\002\000\004\030\uffaf\001" +
    "\002\000\004\061\032\001\002\000\006\031\uffe4\036\077" +
    "\001\002\000\004\061\032\001\002\000\004\031\101\001" +
    "\002\000\012\025\042\026\043\027\037\061\041\001\002" +
    "\000\004\030\103\001\002\000\020\003\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\022\ufffd\023\ufffd\024\ufffd\001\002\000\004" +
    "\030\105\001\002\000\020\003\uffe5\005\uffe5\007\uffe5\010" +
    "\uffe5\022\uffe5\023\uffe5\024\uffe5\001\002\000\004\037\114" +
    "\001\002\000\004\031\110\001\002\000\012\025\042\026" +
    "\043\027\037\061\041\001\002\000\006\030\112\037\uffe2" +
    "\001\002\000\004\061\032\001\002\000\004\037\uffe1\001" +
    "\002\000\006\030\uffe3\031\uffe3\001\002\000\004\033\123" +
    "\001\002\000\024\003\ufff1\005\ufff1\007\ufff1\010\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\030\ufff1\061\117\001\002\000\004" +
    "\033\120\001\002\000\010\044\062\045\060\046\061\001" +
    "\002\000\004\030\122\001\002\000\024\003\uffef\005\uffef" +
    "\007\uffef\010\uffef\022\uffef\023\uffef\024\uffef\030\uffef\061" +
    "\uffef\001\002\000\010\044\062\045\060\046\061\001\002" +
    "\000\004\030\125\001\002\000\024\003\ufff0\005\ufff0\007" +
    "\ufff0\010\ufff0\022\ufff0\023\ufff0\024\ufff0\030\ufff0\061\ufff0" +
    "\001\002\000\022\003\130\005\ufffb\011\ufffb\014\ufffb\015" +
    "\ufffb\020\ufffb\030\ufffb\061\ufffb\001\002\000\020\005\uffb8" +
    "\011\142\014\151\015\150\020\146\030\uffb8\061\140\001" +
    "\002\000\022\005\ufff8\006\ufff8\011\ufff8\014\ufff8\015\ufff8" +
    "\020\ufff8\030\ufff8\061\ufff8\001\002\000\022\005\uffb8\006" +
    "\134\011\142\014\151\015\150\020\146\030\uffb8\061\140" +
    "\001\002\000\006\005\260\030\261\001\002\000\036\005" +
    "\uffd8\006\uffd8\011\uffd8\013\uffd8\014\uffd8\015\uffd8\020\uffd8" +
    "\030\uffd8\036\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\061" +
    "\uffd8\001\002\000\006\030\ufffe\035\ufffe\001\002\000\022" +
    "\005\ufff9\006\ufff9\011\ufff9\014\ufff9\015\ufff9\020\ufff9\030" +
    "\ufff9\061\ufff9\001\002\000\036\005\uffda\006\uffda\011\uffda" +
    "\013\uffda\014\uffda\015\uffda\020\uffda\030\uffda\036\uffda\043" +
    "\uffda\044\uffda\045\uffda\046\uffda\061\uffda\001\002\000\004" +
    "\030\257\001\002\000\014\030\uffbf\032\uffd5\035\251\036" +
    "\205\040\252\001\002\000\004\032\247\001\002\000\016" +
    "\036\157\043\156\044\062\045\060\046\061\061\153\001" +
    "\002\000\036\005\uffdb\006\uffdb\011\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\020\uffdb\030\uffdb\036\uffdb\043\uffdb\044\uffdb\045" +
    "\uffdb\046\uffdb\061\uffdb\001\002\000\036\005\uffd7\006\uffd7" +
    "\011\uffd7\013\uffd7\014\uffd7\015\uffd7\020\uffd7\030\uffd7\036" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\061\uffd7\001\002" +
    "\000\004\030\237\001\002\000\016\036\157\043\156\044" +
    "\062\045\060\046\061\061\153\001\002\000\036\005\uffd9" +
    "\006\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9\020\uffd9\030" +
    "\uffd9\036\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\061\uffd9" +
    "\001\002\000\004\061\217\001\002\000\016\036\157\043" +
    "\156\044\062\045\060\046\061\061\153\001\002\000\044" +
    "\012\uffd1\016\uffd1\017\uffd1\021\uffd1\030\uffd1\031\uffd1\034" +
    "\uffd1\037\uffd1\041\uffd1\042\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\053\uffd1\054\uffd1\055\uffd1\001\002\000\052\012" +
    "\uffbf\016\uffbf\017\uffbf\021\uffbf\030\uffbf\031\uffbf\034\uffbf" +
    "\035\203\036\205\037\uffbf\040\204\041\uffbf\042\uffbf\047" +
    "\uffbf\050\uffbf\051\uffbf\052\uffbf\053\uffbf\054\uffbf\055\uffbf" +
    "\001\002\000\044\012\uffc5\016\uffc5\017\uffc5\021\uffc5\030" +
    "\uffc5\031\uffc5\034\uffc5\037\uffc5\041\uffc5\042\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\001" +
    "\002\000\024\017\200\042\162\047\170\050\167\051\173" +
    "\052\175\053\174\054\166\055\172\001\002\000\016\036" +
    "\157\043\156\044\062\045\060\046\061\061\153\001\002" +
    "\000\016\036\157\043\156\044\062\045\060\046\061\061" +
    "\153\001\002\000\024\037\164\042\162\047\170\050\167" +
    "\051\173\052\175\053\174\054\166\055\172\001\002\000" +
    "\016\036\157\043\156\044\062\045\060\046\061\061\153" +
    "\001\002\000\016\036\uffcd\043\uffcd\044\uffcd\045\uffcd\046" +
    "\uffcd\061\uffcd\001\002\000\016\036\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\061\uffce\001\002\000\044\012\uffc3\016" +
    "\uffc3\017\uffc3\021\uffc3\030\uffc3\031\uffc3\034\uffc3\037\uffc3" +
    "\041\uffc3\042\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\055\uffc3\001\002\000\016\036\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\061\uffcf\001\002\000\016\036" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\046\uffc7\061\uffc7\001\002" +
    "\000\016\036\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\061" +
    "\uffcb\001\002\000\016\036\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\061\uffcc\001\002\000\016\036\uffd0\043\uffd0\044" +
    "\uffd0\045\uffd0\046\uffd0\061\uffd0\001\002\000\016\036\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\061\uffc6\001\002\000" +
    "\016\036\uffca\043\uffca\044\uffca\045\uffca\046\uffca\061\uffca" +
    "\001\002\000\016\036\uffc8\043\uffc8\044\uffc8\045\uffc8\046" +
    "\uffc8\061\uffc8\001\002\000\016\036\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\061\uffc9\001\002\000\044\012\uffd2\016" +
    "\uffd2\017\uffd2\021\uffd2\030\uffd2\031\uffd2\034\uffd2\037\uffd2" +
    "\041\uffd2\042\162\047\170\050\167\051\173\052\175\053" +
    "\174\054\166\055\172\001\002\000\044\012\uffc4\016\uffc4" +
    "\017\uffc4\021\uffc4\030\uffc4\031\uffc4\034\uffc4\037\uffc4\041" +
    "\uffc4\042\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053\uffc4" +
    "\054\uffc4\055\uffc4\001\002\000\020\005\uffa8\011\uffa8\014" +
    "\uffa8\015\uffa8\020\uffa8\030\uffa8\061\uffa8\001\002\000\020" +
    "\005\uffb8\011\142\014\151\015\150\020\146\030\uffb8\061" +
    "\140\001\002\000\036\005\uffa7\006\uffa7\011\uffa7\013\uffa7" +
    "\014\uffa7\015\uffa7\020\uffa7\030\uffa7\036\uffa7\043\uffa7\044" +
    "\uffa7\045\uffa7\046\uffa7\061\uffa7\001\002\000\004\061\216" +
    "\001\002\000\016\036\157\043\156\044\062\045\060\046" +
    "\061\061\153\001\002\000\016\036\157\043\156\044\062" +
    "\045\060\046\061\061\153\001\002\000\044\012\uffc2\016" +
    "\uffc2\017\uffc2\021\uffc2\030\uffc2\031\uffc2\034\uffc2\037\uffc2" +
    "\041\uffc2\042\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\053" +
    "\uffc2\054\uffc2\055\uffc2\001\002\000\026\034\212\037\uffbd" +
    "\042\162\047\170\050\167\051\173\052\175\053\174\054" +
    "\166\055\172\001\002\000\004\037\211\001\002\000\044" +
    "\012\uffbe\016\uffbe\017\uffbe\021\uffbe\030\uffbe\031\uffbe\034" +
    "\uffbe\037\uffbe\041\uffbe\042\uffbe\047\uffbe\050\uffbe\051\uffbe" +
    "\052\uffbe\053\uffbe\054\uffbe\055\uffbe\001\002\000\016\036" +
    "\157\043\156\044\062\045\060\046\061\061\153\001\002" +
    "\000\004\037\uffbc\001\002\000\024\041\215\042\162\047" +
    "\170\050\167\051\173\052\175\053\174\054\166\055\172" +
    "\001\002\000\044\012\uffc1\016\uffc1\017\uffc1\021\uffc1\030" +
    "\uffc1\031\uffc1\034\uffc1\037\uffc1\041\uffc1\042\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\055\uffc1\001" +
    "\002\000\044\012\uffc0\016\uffc0\017\uffc0\021\uffc0\030\uffc0" +
    "\031\uffc0\034\uffc0\037\uffc0\041\uffc0\042\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\052\uffc0\053\uffc0\054\uffc0\055\uffc0\001\002" +
    "\000\004\032\220\001\002\000\016\036\157\043\156\044" +
    "\062\045\060\046\061\061\153\001\002\000\024\016\222" +
    "\042\162\047\170\050\167\051\173\052\175\053\174\054" +
    "\166\055\172\001\002\000\016\036\157\043\156\044\062" +
    "\045\060\046\061\061\153\001\002\000\024\017\224\042" +
    "\162\047\170\050\167\051\173\052\175\053\174\054\166" +
    "\055\172\001\002\000\020\005\uffa6\011\uffa6\014\uffa6\015" +
    "\uffa6\020\uffa6\030\uffa6\061\uffa6\001\002\000\020\005\uffb8" +
    "\011\142\014\151\015\150\020\146\030\uffb8\061\140\001" +
    "\002\000\036\005\uffa5\006\uffa5\011\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\020\uffa5\030\uffa5\036\uffa5\043\uffa5\044\uffa5\045" +
    "\uffa5\046\uffa5\061\uffa5\001\002\000\024\021\230\042\162" +
    "\047\170\050\167\051\173\052\175\053\174\054\166\055" +
    "\172\001\002\000\016\036\157\043\156\044\062\045\060" +
    "\046\061\061\153\001\002\000\004\006\236\001\002\000" +
    "\024\031\233\042\162\047\170\050\167\051\173\052\175" +
    "\053\174\054\166\055\172\001\002\000\020\005\uffb8\011" +
    "\142\014\151\015\150\020\146\030\uffb8\061\140\001\002" +
    "\000\020\006\uffa3\036\157\043\156\044\062\045\060\046" +
    "\061\061\153\001\002\000\004\006\uffa2\001\002\000\036" +
    "\005\uffa4\006\uffa4\011\uffa4\013\uffa4\014\uffa4\015\uffa4\020" +
    "\uffa4\030\uffa4\036\uffa4\043\uffa4\044\uffa4\045\uffa4\046\uffa4" +
    "\061\uffa4\001\002\000\036\005\uffdc\006\uffdc\011\uffdc\013" +
    "\uffdc\014\uffdc\015\uffdc\020\uffdc\030\uffdc\036\uffdc\043\uffdc" +
    "\044\uffdc\045\uffdc\046\uffdc\061\uffdc\001\002\000\024\012" +
    "\241\042\162\047\170\050\167\051\173\052\175\053\174" +
    "\054\166\055\172\001\002\000\020\005\uffac\011\uffac\014" +
    "\uffac\015\uffac\020\uffac\030\uffac\061\uffac\001\002\000\020" +
    "\005\uffb8\011\142\014\151\015\150\020\146\030\uffb8\061" +
    "\140\001\002\000\036\005\uffaa\006\uffaa\011\uffaa\013\245" +
    "\014\uffaa\015\uffaa\020\uffaa\030\uffaa\036\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\061\uffaa\001\002\000\036\005\uffab" +
    "\006\uffab\011\uffab\013\uffab\014\uffab\015\uffab\020\uffab\030" +
    "\uffab\036\uffab\043\uffab\044\uffab\045\uffab\046\uffab\061\uffab" +
    "\001\002\000\020\005\uffb8\011\142\014\151\015\150\020" +
    "\146\030\uffb8\061\140\001\002\000\036\005\uffa9\006\uffa9" +
    "\011\uffa9\013\uffa9\014\uffa9\015\uffa9\020\uffa9\030\uffa9\036" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\061\uffa9\001\002" +
    "\000\016\036\157\043\156\044\062\045\060\046\061\061" +
    "\153\001\002\000\024\030\uffd6\042\162\047\170\050\167" +
    "\051\173\052\175\053\174\054\166\055\172\001\002\000" +
    "\004\061\256\001\002\000\016\036\157\043\156\044\062" +
    "\045\060\046\061\061\153\001\002\000\004\030\uffbb\001" +
    "\002\000\024\041\255\042\162\047\170\050\167\051\173" +
    "\052\175\053\174\054\166\055\172\001\002\000\004\032" +
    "\uffd4\001\002\000\004\032\uffd3\001\002\000\036\005\uffdd" +
    "\006\uffdd\011\uffdd\013\uffdd\014\uffdd\015\uffdd\020\uffdd\030" +
    "\uffdd\036\uffdd\043\uffdd\044\uffdd\045\uffdd\046\uffdd\061\uffdd" +
    "\001\002\000\022\003\uffba\005\uffba\011\uffba\014\uffba\015" +
    "\uffba\020\uffba\030\uffba\061\uffba\001\002\000\010\007\030" +
    "\010\017\024\023\001\002\000\006\005\uffb5\030\uffb5\001" +
    "\002\000\006\005\uffb4\030\uffb4\001\002\000\006\005\uffb7" +
    "\030\uffb7\001\002\000\006\005\uffb6\030\uffb6\001\002\000" +
    "\022\003\130\005\ufffb\011\ufffb\014\ufffb\015\ufffb\020\ufffb" +
    "\030\ufffb\061\ufffb\001\002\000\022\005\uffb8\006\270\011" +
    "\142\014\151\015\150\020\146\030\uffb8\061\140\001\002" +
    "\000\036\005\uffb9\006\uffb9\011\uffb9\013\uffb9\014\uffb9\015" +
    "\uffb9\020\uffb9\030\uffb9\036\uffb9\043\uffb9\044\uffb9\045\uffb9" +
    "\046\uffb9\061\uffb9\001\002\000\022\005\ufffa\006\ufffa\011" +
    "\ufffa\014\ufffa\015\ufffa\020\ufffa\030\ufffa\061\ufffa\001\002" +
    "\000\006\030\uffe4\036\077\001\002\000\004\030\274\001" +
    "\002\000\020\003\ufffd\005\ufffd\007\ufffd\010\ufffd\022\ufffd" +
    "\023\ufffd\024\ufffd\001\002\000\004\030\276\001\002\000" +
    "\020\003\uffe6\005\uffe6\007\uffe6\010\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\010\001\001\000\016\006\014\007\025\012" +
    "\026\015\020\016\024\041\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\125\001\001\000\004\010\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\042" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\032\014\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\034\001\001\000\002\001\001\000\006\021" +
    "\037\044\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\045\001\001\000\002\001\001" +
    "\000\006\021\037\044\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\054\001\001" +
    "\000\006\013\072\014\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\037\044\067\001\001\000\002\001\001\000" +
    "\004\042\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\034\001\001\000\004\017" +
    "\077\001\001\000\006\014\106\020\105\001\001\000\002" +
    "\001\001\000\006\021\037\044\101\001\001\000\002\001" +
    "\001\000\006\003\103\004\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\037\044\110\001\001\000\002\001\001\000\006" +
    "\014\106\020\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\120\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\130\054\126\001\001\000\026\022" +
    "\270\023\136\024\140\035\144\036\142\037\131\045\135" +
    "\047\146\050\132\051\143\001\001\000\002\001\001\000" +
    "\026\022\134\023\136\024\140\035\144\036\142\037\131" +
    "\045\135\047\146\050\132\051\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\033\252\001" +
    "\001\000\002\001\001\000\010\011\153\025\237\032\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\153\025\226\032\151\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\153\025\154\032" +
    "\151\001\001\000\002\001\001\000\004\033\205\001\001" +
    "\000\002\001\001\000\012\026\160\027\170\030\162\031" +
    "\164\001\001\000\006\011\153\032\176\001\001\000\010" +
    "\011\153\025\157\032\151\001\001\000\012\026\160\027" +
    "\170\030\162\031\164\001\001\000\010\011\153\025\175" +
    "\032\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\026\160\027\170\030\162\031\164\001\001\000" +
    "\002\001\001\000\004\057\200\001\001\000\026\022\201" +
    "\023\136\024\140\035\144\036\142\037\131\045\135\047" +
    "\146\050\132\051\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\011\153\025\213\032\151\001\001\000" +
    "\012\011\153\025\206\032\151\034\207\001\001\000\002" +
    "\001\001\000\012\026\160\027\170\030\162\031\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\153" +
    "\025\206\032\151\034\212\001\001\000\002\001\001\000" +
    "\012\026\160\027\170\030\162\031\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\153\025\220\032\151\001\001\000\012\026\160\027\170" +
    "\030\162\031\164\001\001\000\010\011\153\025\222\032" +
    "\151\001\001\000\012\026\160\027\170\030\162\031\164" +
    "\001\001\000\004\060\224\001\001\000\026\022\225\023" +
    "\136\024\140\035\144\036\142\037\131\045\135\047\146" +
    "\050\132\051\143\001\001\000\002\001\001\000\012\026" +
    "\160\027\170\030\162\031\164\001\001\000\012\011\153" +
    "\025\231\032\151\052\230\001\001\000\002\001\001\000" +
    "\012\026\160\027\170\030\162\031\164\001\001\000\026" +
    "\022\233\023\136\024\140\035\144\036\142\037\131\045" +
    "\135\047\146\050\132\051\143\001\001\000\012\011\153" +
    "\025\231\032\151\052\234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\026\160\027\170" +
    "\030\162\031\164\001\001\000\004\056\241\001\001\000" +
    "\026\022\242\023\136\024\140\035\144\036\142\037\131" +
    "\045\135\047\146\050\132\051\143\001\001\000\004\046" +
    "\243\001\001\000\002\001\001\000\026\022\245\023\136" +
    "\024\140\035\144\036\142\037\131\045\135\047\146\050" +
    "\132\051\143\001\001\000\002\001\001\000\010\011\153" +
    "\025\247\032\151\001\001\000\012\026\160\027\170\030" +
    "\162\031\164\001\001\000\002\001\001\000\010\011\153" +
    "\025\253\032\151\001\001\000\002\001\001\000\012\026" +
    "\160\027\170\030\162\031\164\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\055\265\001" +
    "\001\000\012\007\264\012\261\040\263\041\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\266\054\126\001\001\000\026" +
    "\022\134\023\136\024\140\035\144\036\142\037\131\045" +
    "\135\047\146\050\132\051\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\272\001\001\000\002\001" +
    "\001\000\006\003\274\004\010\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  // INIT CODE
  // Codigo para inicializar
  System.out.println("---------------------------------------------------------------------\n"
                    +"|       ANALIZADOR LEXICO Y SINTACTICO PARA LEGUAJE PASCAL          |\n"
                    +"---------------------------------------------------------------------\n");
  this.stack = new Stack<>();
  this.htmlGenerator = new HTMLGenerator(this.fileName);

    }



    Stack<Regla> stack; // Pila donde se almacenan las reglas que se han reducido

    HTMLGenerator htmlGenerator;

    public String fileName;

    public void report_error(String mensajeError, Object token) {

                 StringBuilder salidaError = new StringBuilder("ERROR SINTACTICO: ");

                 if (token instanceof java_cup.runtime.Symbol) {

                     java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) token);

                     if (s.left >= 0) {
                         salidaError.append(" en la linea "+(s.left + 1));
                         if (s.right >= 0)
                             salidaError.append(", columna "+(s.right));
                     }

                     if (s.value != null){
                         salidaError.append(". No se esperaba el token <"+s.value.toString()+">");
                     }

                 }

        salidaError.append(" : " + mensajeError);

        System.err.println(salidaError);
    }

    /* Método para errores irrecuperables */

    public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
      report_fatal_error("El analizador no pudo recuperarse del error sintactico", token);
    }

    public void report_fatal_error(String mensajeError, Object token) {
        mensajeError = "Error sintactico irrecuperable\n" + mensajeError;
        report_error(mensajeError, token);
        System.exit(1);
    }

    /* Método para errores recuperables */

    public void syntax_error(Symbol token) {
      report_error("Se procedera a intentar continuar con el analisis sintactico", token);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


  // ACTION CODE
  // Codigo para métodos
  public void pushRegla(String cadena){
    System.out.println(cadena);
    Regla regla = new Regla(cadena);
    stack.push(regla);
  }

  public void mostrarArbol(String cadena){
    System.out.println(cadena + "\n");
    Regla regla = new Regla(cadena);
    stack.push(regla);
    System.out.println("---------------------------------------------------------------------\n"
                      +"|                    ARBOL SINTACTICO GENERADO                      |\n"
                      +"---------------------------------------------------------------------\n");
    System.out.println("_" + regla.antecedente);
    Regla.printSyntacticTree(stack, ""); // Pinta el arbol sintáctico (ver clase "Regla")
  }


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= program identifier semicolons BLQ point 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 mostrarArbol("PRG <%program "+i1+" ; BLQ .%>");
                                                         htmlGenerator.nameProgram = i1;
                                                         htmlGenerator.closeHTML();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              String RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dcllist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
htmlGenerator.identLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin NT$0 SENTLIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dcllist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 htmlGenerator.identLevel--;
                                                      pushRegla("BLQ <%DCLLIST begin SENTLIST end%>");
                                                      htmlGenerator.getMainProgram(sentlist);
                                                      RESULT = dcllist + "<br/>" + htmlGenerator.getReservedWord("begin") + sentlist + htmlGenerator.getReservedWord("end");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= 
            {
              String RESULT =null;
		 pushRegla("DCLLIST <%lambda%>");
                                       RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= DCLLIST DCL 
            {
              String RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dcllist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dcl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCLLIST <%DCLLIST DCL%>");
                                       htmlGenerator.updateLastDcl(dcl);
                                       RESULT = dcllist + (String)dcl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =null;
 htmlGenerator.sentCond = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= NT$1 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENTLIST <%SENT%>"); // Hay mas de una sentencia
                                                                  RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENTLIST SENT 
            {
              String RESULT =null;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENTLIST <%SENTLIST SENT%>");
                                           RESULT = sentlist + (String)sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFCTE 
            {
              String RESULT =null;
		int defcteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defcteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defcte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL <%DEFCTE%>");
                          RESULT = defcte;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFVAR 
            {
              String RESULT =null;
		int defvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defvar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL <%DEFVAR%>");
                          RESULT = defvar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFPROC 
            {
              String RESULT =null;
		int defprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defproc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL <%DEFPROC%>");
                           RESULT = defproc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFFUN 
            {
              String RESULT =null;
		int deffunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deffunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deffun = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL <%DEFFUN%>");
                          RESULT = deffun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DCL ::= DEFTYPE 
            {
              String RESULT =null;
		int deftypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deftyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deftype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL <%DEFTYPE%>");
                           RESULT = deftype;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DCL ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DEFCTE ::= const_t CTELIST 
            {
              String RESULT =null;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ctelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DEFCTE <%const CTELIST%>");
                                     RESULT = htmlGenerator.getReservedWord("const") + ctelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // CTELIST ::= identifier equal SIMPVALUE semicolons 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String simpvalue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("CTELIST <%" +i1+" = SIMPVALUE ;%>");
                                                                 RESULT = htmlGenerator.getIdent(i1) + "=" + simpvalue + ";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CTELIST ::= CTELIST identifier equal SIMPVALUE semicolons 
            {
              String RESULT =null;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ctelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String simpvalue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("CTELIST <%CTELIST "+i2+" = SIMPVALUE ;%>");
                                                                                  RESULT = (String)ctelist + htmlGenerator.getIdent(i2) + "=" + (String)simpvalue + ";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SIMPVALUE ::= decimal_value 
            {
              String RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SIMVALUE <%" + dv + "%>" );
                                    RESULT = htmlGenerator.getConst(dv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SIMPVALUE ::= hexadecimal_value 
            {
              String RESULT =null;
		int hvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String hv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SIMVALUE <%" + hv + "%>");
                                    RESULT = htmlGenerator.getConst(hv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SIMPVALUE ::= string_literal 
            {
              String RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SIMVALUE <%" + sl + "%>");
                                    RESULT = htmlGenerator.getConst(sl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DEFVAR ::= var DEFVARLIST semicolons 
            {
              String RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String defvarlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("DEFVAR <%var DEFVARLIST ;%>");
                                                  RESULT = htmlGenerator.getReservedWord("var ") + defvarlist + "; ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DEFVARLIST ::= VARLIST colons ALLTYPES 
            {
              String RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DEFVARLIST <%VARLIST : ALLTYPES%>");
                                                                                            RESULT = varlist + " : " + alltypes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFVARLIST ::= DEFVARLIST semicolons VARLIST colons ALLTYPES 
            {
              String RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String defvarlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DEFVARLIST <%DEFVARLIST ; VARLIST : ALLTYPES%>");
                                                                                            RESULT = defvarlist + "; " + varlist + " : " + alltypes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // VARLIST ::= identifier 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("VARLIST <%" + i1 + "%>");
                                                    RESULT = htmlGenerator.getIdent(i1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // VARLIST ::= identifier comma VARLIST 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("VARLIST <%"+ i2 +" , VARLIST%>");
                                                    RESULT = htmlGenerator.getIdent(i2) + "," + varlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DEFPROC ::= procedure identifier FORMAL_PARAMLIST semicolons BLQ semicolons 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int formal_paramlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formal_paramlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String formal_paramlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    pushRegla("DEFPROC <%procedure "+ i1 +" FORMAL_PARAMLIST ; BLQ ;%>");
                    RESULT = htmlGenerator.getProc(i1, formal_paramlist, blq);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFFUN ::= function identifier FORMAL_PARAMLIST colons ALLTYPES semicolons BLQ semicolons 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int formal_paramlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int formal_paramlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String formal_paramlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    pushRegla("DEFFUN <%function "+i2+" FORMAL_PARAMLIST : ALLTYPES ; BLQ ;%>");
                    RESULT = htmlGenerator.getFunc(i2, formal_paramlist, alltypes, blq);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FORMAL_PARAMLIST ::= 
            {
              String RESULT =null;
		 pushRegla("FORMAL_PARAMLIST <%lambda%>");
                                                                              RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FORMAL_PARAMLIST ::= open_bracket FORMAL_PARAM close_bracket 
            {
              String RESULT =null;
		int formal_paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formal_paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String formal_param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("FORMAL_PARAMLIST <%( FORMAL_PARAM )%>");
                                                                              RESULT = "(" + formal_param + ")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FORMAL_PARAM ::= VARLIST colons ALLTYPES 
            {
              String RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FORMAL_PARAM <%VARLIST : ALLTYPES%>");
                                                                                                  RESULT = varlist + ":" + alltypes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FORMAL_PARAM ::= VARLIST colons ALLTYPES semicolons FORMAL_PARAM 
            {
              String RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int formal_paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int formal_paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String formal_param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FORMAL_PARAM <%VARLIST : ALLTYPES ; FORMAL_PARAM%>");
                                                                                                  RESULT = varlist + ":" + alltypes + ";" + formal_param;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TBAS ::= int_name 
            {
              String RESULT =null;
		 pushRegla("TBAS <%INTEGER%>");
                       RESULT = htmlGenerator.getReservedWord(" INTEGER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TBAS ::= real_name 
            {
              String RESULT =null;
		 pushRegla("TBAS <%REAL%>");
                       RESULT = htmlGenerator.getReservedWord(" REAL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TBAS ::= char_name 
            {
              String RESULT =null;
		 pushRegla("TBAS <%CHAR%>");
                       RESULT = htmlGenerator.getReservedWord(" CHARACTER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENT ::= ASIG semicolons 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("SENT <%ASIG ;%>");
                                             RESULT = htmlGenerator.getSent(asig + ";", htmlGenerator.sentCond);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENT ::= PROC_CALL semicolons 
            {
              String RESULT =null;
		int proc_callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int proc_callright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String proc_call = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("SENT <%PROC_CALL ;%>");
                                             RESULT = htmlGenerator.getSent(proc_call + ";", htmlGenerator.sentCond);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENT ::= EXEBLQ 
            {
              String RESULT =null;
		int exeblqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exeblqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exeblq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%EXEBLQ%>");
                                             RESULT = exeblq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENT ::= COND 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%COND%>");
                                             RESULT = htmlGenerator.getSent(cond);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= WLOOP 
            {
              String RESULT =null;
		int wloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String wloop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%WLOOP%>");
                                             RESULT = htmlGenerator.getSent(wloop);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= FLOOP 
            {
              String RESULT =null;
		int floopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int floopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String floop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%FLOOP%>");
                                             RESULT = htmlGenerator.getSent(floop);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= CASE 
            {
              String RESULT =null;
		int case_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int case_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String case_t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("SENT <%CASE%>");
                                             RESULT = htmlGenerator.getSent(case_t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIG ::= ID asig EXP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ASIG <%ID := EXP%>");
                              RESULT = id + " := " + exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ID ::= identifier 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ID <%"+i1+"%>");
                                                                          RESULT = htmlGenerator.getIdent(i1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ID ::= identifier open_square_bracket EXP close_square_bracket 
            {
              String RESULT =null;
		int i4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("ID <%"+i4+" [ EXP ]%>");
                                                                          RESULT = htmlGenerator.getIdent(i4) + "[ " + exp + " ]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ID ::= identifier point identifier 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ID <%"+i2+" . "+i3+"%>");
                                                                          RESULT = htmlGenerator.getIdent(i2) + "." + htmlGenerator.getIdent(i3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= EXP OP EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("EXP <%EXP OP EXP%>");
                                  RESULT = (String)exp1 + op + (String)exp2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= FACTOR 
            {
              String RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String factor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("EXP <%FACTOR%>");
                                  RESULT = factor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OP ::= OPCOMP 
            {
              String RESULT =null;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opcomp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("OP <%OPCOMP%>");
                         RESULT = opcomp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // OP ::= OPLOG 
            {
              String RESULT =null;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oplog = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("OP <%OPLOG%>");
                         RESULT = oplog;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OP ::= OPARIT 
            {
              String RESULT =null;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oparit = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("OP <%OPARIT%>");
                         RESULT = oparit;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OPCOMP ::= comparator_op 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("OPCOMP <%"+op+"%>");
                              RESULT = op;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OPARIT ::= plus 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%+%>");
                        RESULT = " + ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OPARIT ::= minus 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%-%>");
                        RESULT = " - ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPARIT ::= product 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%*%>");
                        RESULT = " * ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPARIT ::= div_op 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%div%>");
                        RESULT = " div ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPARIT ::= mod_op 
            {
              String RESULT =null;
		 pushRegla("OPARIT <%mod%>");
                        RESULT = " mod ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPLOG ::= and_op 
            {
              String RESULT =null;
		 pushRegla("OPLOG <%and%>");
                      RESULT = "and";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPLOG ::= or_op 
            {
              String RESULT =null;
		 pushRegla("OPLOG <%or%>");
                      RESULT = "or";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FACTOR ::= SIMPVALUE 
            {
              String RESULT =null;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simpvalue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FACTOR <%SIMPVALUE%>");
                                                                                RESULT = simpvalue;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FACTOR ::= not_op FACTOR 
            {
              String RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String factor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FACTOR <%not FACTOR%>");
                                                                                RESULT = "not" + factor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FACTOR ::= open_bracket EXP close_bracket 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("FACTOR <%( EXP )%>");
                                                                                RESULT = "(" + exp + ")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FACTOR ::= identifier SUBPARAMLIST 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String subparamlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FACTOR <%"+i1+" SUBPARAMLIST%>");
                                                                                RESULT = htmlGenerator.getIdent(i1) + (String)subparamlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FACTOR ::= identifier open_square_bracket EXP close_square_bracket 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("FACTOR <%"+i2+" [ EXP ]%>");
                                                                                RESULT = htmlGenerator.getIdent(i2) + "[" + exp + "]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FACTOR ::= identifier point identifier 
            {
              String RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FACTOR <%"+i3+" . "+i4+"%>");
                                                                                RESULT = htmlGenerator.getIdent(i3) + "." + htmlGenerator.getIdent(i4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SUBPARAMLIST ::= 
            {
              String RESULT =null;
		 pushRegla("SUBPARAMLIST <%lambda%>");
                                                                RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SUBPARAMLIST ::= open_bracket EXPLIST close_bracket 
            {
              String RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String explist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("SUBPARAMLIST <%( EXPLIST )%>");
                                                                RESULT = " (" + explist + ") ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPLIST ::= EXP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("EXPLIST <%EXP%>");
                                             RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPLIST ::= EXP comma EXPLIST 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String explist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("EXPLIST <%EXP , EXPLIST%>");
                                             RESULT = exp + "," + explist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String subparamlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("PROC_CALL <%"+i1+" SUBPARAMLIST%>");
                                                        RESULT = htmlGenerator.getIdent(i1) + (String)subparamlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$2 ::= 
            {
              String RESULT =null;
		int dcllist_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllist_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dcllist_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
htmlGenerator.identLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXEBLQ ::= DCLLIST_BLQ begin NT$2 SENTLIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcllist_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dcllist_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dcllist_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                 htmlGenerator.identLevel--;
                                                                 pushRegla("EXEBLQ <%DCLLIST_BLQ begin SENTLIST end%>");
                                                                 RESULT = dcllist_blq + htmlGenerator.getReservedWordIdent("begin") + sentlist + htmlGenerator.getReservedWordIdent("end");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DCLLIST_BLQ ::= 
            {
              String RESULT =null;
		 pushRegla("DCLLIST_BLQ <%lambda%>");
                                                    RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DCLLIST_BLQ ::= DCLLIST_BLQ semicolons DCL_BLQ 
            {
              String RESULT =null;
		int dcllist_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dcllist_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dcllist_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcl_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcl_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dcl_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCLLIST_BLQ <%DCLLIST_BLQ ; DCL_BLQ%>");
                                                                        RESULT = dcllist_blq + ";" + dcl_blq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DCL_BLQ ::= DEFCTE 
            {
              String RESULT =null;
		int defcteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defcteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defcte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL_BLQ <%DEFCTE%>");
                                RESULT = defcte;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DCL_BLQ ::= DEFVAR 
            {
              String RESULT =null;
		int defvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defvar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL_BLQ <%DEFVAR%>");
                                RESULT = defvar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DCL_BLQ ::= DEFTYPE 
            {
              String RESULT =null;
		int deftypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deftyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deftype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DCL_BLQ <%DEFTYPE%>");
                                RESULT = deftype;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DEFTYPE ::= type TYPELIST 
            {
              String RESULT =null;
		int typelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String typelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("DEFTYPE <%type TYPELIST%>");
                                      RESULT = htmlGenerator.getReservedWord("type ") + typelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // TYPELIST ::= identifier equal UDTYPE semicolons 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int udtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int udtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String udtype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("TYPELIST <%"+i1+" = UDTYPE ;%>");
                                                                                   RESULT = htmlGenerator.getIdent(i1) + " = " + udtype + ";";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // TYPELIST ::= identifier equal UDTYPE semicolons TYPELIST 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int udtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int udtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String udtype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String typelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("TYPELIST <%"+i2+" = UDTYPE ; TYPELIST%>");
                                                                                   RESULT = htmlGenerator.getIdent(i2) + " = " + udtype + ";" + typelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // UDTYPE ::= array open_square_bracket SIMPVALUE two_points SIMPVALUE close_square_bracket of ALLTYPES 
            {
              String RESULT =null;
		int simpvalue1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int simpvalue1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String simpvalue1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int simpvalue2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int simpvalue2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String simpvalue2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    pushRegla("UDTYPE <%array [ SIMPVALUE .. SIMPVALUE ] of ALLTYPES%>");
                    RESULT = htmlGenerator.getReservedWord("array ") + "[ " + simpvalue1 + " .. " + simpvalue2 + " ]" + htmlGenerator.getReservedWord(" of ") + alltypes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // UDTYPE ::= record DEFVARLIST end 
            {
              String RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String defvarlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    pushRegla("UDTYPE <%record DEFVARLIST end%>");
                    RESULT = htmlGenerator.getReservedWord("record ") + defvarlist + htmlGenerator.getReservedWord("end");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ALLTYPES ::= TBAS 
            {
              String RESULT =null;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tbas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ALLTYPES <%TBAS%>");
                                RESULT = tbas;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ALLTYPES ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ALLTYPES <%"+i+"%>");
                                RESULT = htmlGenerator.getIdent(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$3 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // COND ::= if_t EXP then_t NT$3 SENT ELSECOND 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String elsecond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("COND <%if EXP then SENT ELSECOND%>");
                                                            RESULT = htmlGenerator.getReservedWord("if ") + exp + htmlGenerator.getReservedWord(" then ") + sent + elsecond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ELSECOND ::= 
            {
              String RESULT =null;
		 pushRegla("ELSECOND <%lambda%>");
                                   RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ELSECOND ::= else_t SENT 
            {
              String RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("ELSECOND <%else SENT%>");
                                   RESULT = htmlGenerator.getReservedWord("else ") + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$4 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // WLOOP ::= while_t EXP do_t NT$4 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("WLOOP <%while EXP do SENT%>");
                                            RESULT = htmlGenerator.getReservedWord("while ") + exp + htmlGenerator.getReservedWord(" do ") + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$5 ::= 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FLOOP ::= for_t identifier asig EXP to EXP do_t NT$5 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("FLOOP <%for "+i1+" := EXP to EXP do SENT%>");
                                                                          RESULT = htmlGenerator.getReservedWord("for") + htmlGenerator.getIdent(i1) +
                                                                          ":=" + exp1 + htmlGenerator.getReservedWord("to") + exp2 + htmlGenerator.getReservedWord("do") + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CASE ::= case_t EXP of CASELIST end 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int caselistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caselistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String caselist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 pushRegla("CASE <%case EXP of CASELIST end%>");
                                                    RESULT = htmlGenerator.getReservedWord("case") + exp + htmlGenerator.getReservedWord("of") +
                                                    caselist + htmlGenerator.getReservedWord("end");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CASELIST ::= EXP colons SENT 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("CASELIST <%EXP : SENT%>");
                                                             RESULT = exp + " : " + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CASELIST ::= EXP colons SENT CASELIST 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caselistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caselistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String caselist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 pushRegla("CASELIST <%EXP : SENT CASELIST%>");
                                                             RESULT = exp + " : " + sent + caselist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
