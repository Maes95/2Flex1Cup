
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Stack;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\007\000\002\002\004\000\002\053" +
    "\002\000\002\003\007\000\002\004\002\000\002\004\004" +
    "\000\002\054\002\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\055\002\000\002\007\005\000\002\010\006" +
    "\000\002\010\007\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\056\002\000\002\012\006\000\002" +
    "\013\005\000\002\013\007\000\002\014\003\000\002\014" +
    "\005\000\002\057\002\000\002\015\011\000\002\060\002" +
    "\000\002\016\013\000\002\017\002\000\002\017\005\000" +
    "\002\020\005\000\002\020\007\000\002\021\003\000\002" +
    "\021\003\000\002\021\003\000\002\022\004\000\002\022" +
    "\004\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\003\000\002\023\005\000" +
    "\002\024\003\000\002\024\006\000\002\024\005\000\002" +
    "\025\005\000\002\025\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\027\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\003\000\002\032\004\000\002\032\005\000\002\032" +
    "\004\000\002\032\006\000\002\032\005\000\002\033\002" +
    "\000\002\033\005\000\002\034\003\000\002\034\005\000" +
    "\002\035\004\000\002\061\002\000\002\036\007\000\002" +
    "\037\002\000\002\037\005\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\062\002\000\002\041\005" +
    "\000\002\042\006\000\002\042\007\000\002\043\012\000" +
    "\002\063\002\000\002\043\006\000\002\044\003\000\002" +
    "\044\003\000\002\064\002\000\002\045\010\000\002\046" +
    "\002\000\002\065\002\000\002\046\005\000\002\066\002" +
    "\000\002\047\007\000\002\067\002\000\002\050\013\000" +
    "\002\070\002\000\002\051\010\000\002\052\005\000\002" +
    "\052\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\004\004\001\002\000\004\061\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\000\001\002" +
    "\000\004\030\010\001\002\000\020\003\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\022\ufffd\023\ufffd\024\ufffd\001\002\000\020" +
    "\003\023\005\016\007\027\010\017\022\020\023\014\024" +
    "\024\001\002\000\004\035\013\001\002\000\004\002\001" +
    "\001\002\000\004\061\301\001\002\000\020\003\ufffc\005" +
    "\ufffc\007\ufffc\010\ufffc\022\ufffc\023\ufffc\024\ufffc\001\002" +
    "\000\022\003\uffff\005\uffff\011\uffff\014\uffff\015\uffff\020" +
    "\uffff\030\uffff\061\uffff\001\002\000\004\061\ufff1\001\002" +
    "\000\004\061\101\001\002\000\020\003\ufff5\005\ufff5\007" +
    "\ufff5\010\ufff5\022\ufff5\023\ufff5\024\ufff5\001\002\000\020" +
    "\003\ufff3\005\ufff3\007\ufff3\010\ufff3\022\ufff3\023\ufff3\024" +
    "\ufff3\001\002\000\020\003\ufff2\005\ufff2\007\ufff2\010\ufff2" +
    "\022\ufff2\023\ufff2\024\ufff2\001\002\000\004\061\uffaf\001" +
    "\002\000\020\003\ufff4\005\ufff4\007\ufff4\010\ufff4\022\ufff4" +
    "\023\ufff4\024\ufff4\001\002\000\020\003\ufff7\005\ufff7\007" +
    "\ufff7\010\ufff7\022\ufff7\023\ufff7\024\ufff7\001\002\000\004" +
    "\061\uffea\001\002\000\020\003\ufff6\005\ufff6\007\ufff6\010" +
    "\ufff6\022\ufff6\023\ufff6\024\ufff6\001\002\000\004\061\033" +
    "\001\002\000\004\031\050\001\002\000\006\031\uffe6\034" +
    "\046\001\002\000\004\030\035\001\002\000\024\003\uffe9" +
    "\005\uffe9\007\uffe9\010\uffe9\022\uffe9\023\uffe9\024\uffe9\030" +
    "\uffe9\061\033\001\002\000\004\031\037\001\002\000\012" +
    "\025\043\026\044\027\040\061\042\001\002\000\010\006" +
    "\uffda\030\uffda\037\uffda\001\002\000\010\006\uffa8\030\uffa8" +
    "\037\uffa8\001\002\000\010\006\uffa7\030\uffa7\037\uffa7\001" +
    "\002\000\010\006\uffdc\030\uffdc\037\uffdc\001\002\000\010" +
    "\006\uffdb\030\uffdb\037\uffdb\001\002\000\006\006\uffe7\030" +
    "\uffe7\001\002\000\004\061\033\001\002\000\004\031\uffe5" +
    "\001\002\000\012\025\043\026\044\027\040\061\042\001" +
    "\002\000\006\006\uffe8\030\uffe8\001\002\000\004\061\053" +
    "\001\002\000\004\033\055\001\002\000\022\003\uffae\005" +
    "\uffae\007\uffae\010\uffae\022\uffae\023\uffae\024\uffae\030\uffae" +
    "\001\002\000\006\057\060\060\056\001\002\000\004\061" +
    "\uffaa\001\002\000\004\030\073\001\002\000\004\040\061" +
    "\001\002\000\010\044\064\045\062\046\063\001\002\000" +
    "\046\012\uffec\016\uffec\017\uffec\021\uffec\030\uffec\031\uffec" +
    "\034\uffec\037\uffec\041\uffec\042\uffec\047\uffec\050\uffec\051" +
    "\uffec\052\uffec\053\uffec\054\uffec\055\uffec\056\uffec\001\002" +
    "\000\046\012\uffeb\016\uffeb\017\uffeb\021\uffeb\030\uffeb\031" +
    "\uffeb\034\uffeb\037\uffeb\041\uffeb\042\uffeb\047\uffeb\050\uffeb" +
    "\051\uffeb\052\uffeb\053\uffeb\054\uffeb\055\uffeb\056\uffeb\001" +
    "\002\000\046\012\uffed\016\uffed\017\uffed\021\uffed\030\uffed" +
    "\031\uffed\034\uffed\037\uffed\041\uffed\042\uffed\047\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\054\uffed\055\uffed\056\uffed" +
    "\001\002\000\004\056\066\001\002\000\010\044\064\045" +
    "\062\046\063\001\002\000\004\041\070\001\002\000\004" +
    "\021\071\001\002\000\012\025\043\026\044\027\040\061" +
    "\042\001\002\000\004\030\uffab\001\002\000\024\003\uffad" +
    "\005\uffad\007\uffad\010\uffad\022\uffad\023\uffad\024\uffad\030" +
    "\uffad\061\053\001\002\000\022\003\uffac\005\uffac\007\uffac" +
    "\010\uffac\022\uffac\023\uffac\024\uffac\030\uffac\001\002\000" +
    "\004\061\033\001\002\000\006\006\077\030\100\001\002" +
    "\000\004\030\uffa9\001\002\000\004\061\033\001\002\000" +
    "\006\031\uffe2\036\uffe2\001\002\000\006\031\uffe0\036\103" +
    "\001\002\000\004\061\033\001\002\000\004\031\105\001" +
    "\002\000\012\025\043\026\044\027\040\061\042\001\002" +
    "\000\004\030\107\001\002\000\020\003\ufffd\005\ufffd\007" +
    "\ufffd\010\ufffd\022\ufffd\023\ufffd\024\ufffd\001\002\000\004" +
    "\030\111\001\002\000\020\003\uffe1\005\uffe1\007\uffe1\010" +
    "\uffe1\022\uffe1\023\uffe1\024\uffe1\001\002\000\004\037\120" +
    "\001\002\000\004\031\114\001\002\000\012\025\043\026" +
    "\044\027\040\061\042\001\002\000\006\030\116\037\uffde" +
    "\001\002\000\004\061\033\001\002\000\004\037\uffdd\001" +
    "\002\000\006\030\uffdf\031\uffdf\001\002\000\004\061\122" +
    "\001\002\000\004\033\130\001\002\000\024\003\ufff0\005" +
    "\ufff0\007\ufff0\010\ufff0\022\ufff0\023\ufff0\024\ufff0\030\ufff0" +
    "\061\124\001\002\000\004\033\125\001\002\000\010\044" +
    "\064\045\062\046\063\001\002\000\004\030\127\001\002" +
    "\000\024\003\uffee\005\uffee\007\uffee\010\uffee\022\uffee\023" +
    "\uffee\024\uffee\030\uffee\061\uffee\001\002\000\010\044\064" +
    "\045\062\046\063\001\002\000\004\030\132\001\002\000" +
    "\024\003\uffef\005\uffef\007\uffef\010\uffef\022\uffef\023\uffef" +
    "\024\uffef\030\uffef\061\uffef\001\002\000\022\003\135\005" +
    "\ufffb\011\ufffb\014\ufffb\015\ufffb\020\ufffb\030\ufffb\061\ufffb" +
    "\001\002\000\020\005\uffb4\011\147\014\156\015\155\020" +
    "\152\030\uffb4\061\145\001\002\000\022\005\ufff8\006\ufff8" +
    "\011\ufff8\014\ufff8\015\ufff8\020\ufff8\030\ufff8\061\ufff8\001" +
    "\002\000\022\005\uffb4\006\141\011\147\014\156\015\155" +
    "\020\152\030\uffb4\061\145\001\002\000\006\005\267\030" +
    "\270\001\002\000\036\005\uffd4\006\uffd4\011\uffd4\013\uffd4" +
    "\014\uffd4\015\uffd4\020\uffd4\030\uffd4\036\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\046\uffd4\061\uffd4\001\002\000\006\030\ufffe" +
    "\035\ufffe\001\002\000\022\005\ufff9\006\ufff9\011\ufff9\014" +
    "\ufff9\015\ufff9\020\ufff9\030\ufff9\061\ufff9\001\002\000\036" +
    "\005\uffd6\006\uffd6\011\uffd6\013\uffd6\014\uffd6\015\uffd6\020" +
    "\uffd6\030\uffd6\036\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6" +
    "\061\uffd6\001\002\000\004\030\266\001\002\000\014\030" +
    "\uffbb\032\uffd1\035\260\036\212\040\261\001\002\000\004" +
    "\032\256\001\002\000\016\036\163\043\164\044\064\045" +
    "\062\046\063\061\160\001\002\000\036\005\uffd7\006\uffd7" +
    "\011\uffd7\013\uffd7\014\uffd7\015\uffd7\020\uffd7\030\uffd7\036" +
    "\uffd7\043\uffd7\044\uffd7\045\uffd7\046\uffd7\061\uffd7\001\002" +
    "\000\036\005\uffd3\006\uffd3\011\uffd3\013\uffd3\014\uffd3\015" +
    "\uffd3\020\uffd3\030\uffd3\036\uffd3\043\uffd3\044\uffd3\045\uffd3" +
    "\046\uffd3\061\uffd3\001\002\000\016\036\163\043\164\044" +
    "\064\045\062\046\063\061\160\001\002\000\036\005\uffd5" +
    "\006\uffd5\011\uffd5\013\uffd5\014\uffd5\015\uffd5\020\uffd5\030" +
    "\uffd5\036\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5\061\uffd5" +
    "\001\002\000\004\030\234\001\002\000\004\061\224\001" +
    "\002\000\016\036\163\043\164\044\064\045\062\046\063" +
    "\061\160\001\002\000\044\012\uffcd\016\uffcd\017\uffcd\021" +
    "\uffcd\030\uffcd\031\uffcd\034\uffcd\037\uffcd\041\uffcd\042\uffcd" +
    "\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055" +
    "\uffcd\001\002\000\052\012\uffbb\016\uffbb\017\uffbb\021\uffbb" +
    "\030\uffbb\031\uffbb\034\uffbb\035\210\036\212\037\uffbb\040" +
    "\211\041\uffbb\042\uffbb\047\uffbb\050\uffbb\051\uffbb\052\uffbb" +
    "\053\uffbb\054\uffbb\055\uffbb\001\002\000\044\012\uffc1\016" +
    "\uffc1\017\uffc1\021\uffc1\030\uffc1\031\uffc1\034\uffc1\037\uffc1" +
    "\041\uffc1\042\uffc1\047\uffc1\050\uffc1\051\uffc1\052\uffc1\053" +
    "\uffc1\054\uffc1\055\uffc1\001\002\000\024\017\205\042\170" +
    "\047\176\050\175\051\202\052\203\053\201\054\174\055" +
    "\200\001\002\000\016\036\163\043\164\044\064\045\062" +
    "\046\063\061\160\001\002\000\016\036\163\043\164\044" +
    "\064\045\062\046\063\061\160\001\002\000\044\012\uffc0" +
    "\016\uffc0\017\uffc0\021\uffc0\030\uffc0\031\uffc0\034\uffc0\037" +
    "\uffc0\041\uffc0\042\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0" +
    "\053\uffc0\054\uffc0\055\uffc0\001\002\000\024\037\171\042" +
    "\170\047\176\050\175\051\202\052\203\053\201\054\174" +
    "\055\200\001\002\000\016\036\163\043\164\044\064\045" +
    "\062\046\063\061\160\001\002\000\016\036\uffc9\043\uffc9" +
    "\044\uffc9\045\uffc9\046\uffc9\061\uffc9\001\002\000\044\012" +
    "\uffbf\016\uffbf\017\uffbf\021\uffbf\030\uffbf\031\uffbf\034\uffbf" +
    "\037\uffbf\041\uffbf\042\uffbf\047\uffbf\050\uffbf\051\uffbf\052" +
    "\uffbf\053\uffbf\054\uffbf\055\uffbf\001\002\000\016\036\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\061\uffca\001\002\000" +
    "\016\036\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\061\uffcb" +
    "\001\002\000\016\036\uffc3\043\uffc3\044\uffc3\045\uffc3\046" +
    "\uffc3\061\uffc3\001\002\000\016\036\uffc7\043\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\061\uffc7\001\002\000\016\036\uffc8\043" +
    "\uffc8\044\uffc8\045\uffc8\046\uffc8\061\uffc8\001\002\000\016" +
    "\036\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\061\uffcc\001" +
    "\002\000\016\036\uffc2\043\uffc2\044\uffc2\045\uffc2\046\uffc2" +
    "\061\uffc2\001\002\000\016\036\uffc4\043\uffc4\044\uffc4\045" +
    "\uffc4\046\uffc4\061\uffc4\001\002\000\016\036\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\061\uffc6\001\002\000\016\036" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\061\uffc5\001\002" +
    "\000\044\012\uffce\016\uffce\017\uffce\021\uffce\030\uffce\031" +
    "\uffce\034\uffce\037\uffce\041\uffce\042\170\047\176\050\175" +
    "\051\202\052\203\053\201\054\174\055\200\001\002\000" +
    "\020\005\uffa1\011\uffa1\014\uffa1\015\uffa1\020\uffa1\030\uffa1" +
    "\061\uffa1\001\002\000\020\005\uffb4\011\147\014\156\015" +
    "\155\020\152\030\uffb4\061\145\001\002\000\036\005\uffa0" +
    "\006\uffa0\011\uffa0\013\uffa0\014\uffa0\015\uffa0\020\uffa0\030" +
    "\uffa0\036\uffa0\043\uffa0\044\uffa0\045\uffa0\046\uffa0\061\uffa0" +
    "\001\002\000\004\061\223\001\002\000\016\036\163\043" +
    "\164\044\064\045\062\046\063\061\160\001\002\000\016" +
    "\036\163\043\164\044\064\045\062\046\063\061\160\001" +
    "\002\000\044\012\uffbe\016\uffbe\017\uffbe\021\uffbe\030\uffbe" +
    "\031\uffbe\034\uffbe\037\uffbe\041\uffbe\042\uffbe\047\uffbe\050" +
    "\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\001\002" +
    "\000\026\034\217\037\uffb9\042\170\047\176\050\175\051" +
    "\202\052\203\053\201\054\174\055\200\001\002\000\004" +
    "\037\216\001\002\000\044\012\uffba\016\uffba\017\uffba\021" +
    "\uffba\030\uffba\031\uffba\034\uffba\037\uffba\041\uffba\042\uffba" +
    "\047\uffba\050\uffba\051\uffba\052\uffba\053\uffba\054\uffba\055" +
    "\uffba\001\002\000\016\036\163\043\164\044\064\045\062" +
    "\046\063\061\160\001\002\000\004\037\uffb8\001\002\000" +
    "\024\041\222\042\170\047\176\050\175\051\202\052\203" +
    "\053\201\054\174\055\200\001\002\000\044\012\uffbd\016" +
    "\uffbd\017\uffbd\021\uffbd\030\uffbd\031\uffbd\034\uffbd\037\uffbd" +
    "\041\uffbd\042\uffbd\047\uffbd\050\uffbd\051\uffbd\052\uffbd\053" +
    "\uffbd\054\uffbd\055\uffbd\001\002\000\044\012\uffbc\016\uffbc" +
    "\017\uffbc\021\uffbc\030\uffbc\031\uffbc\034\uffbc\037\uffbc\041" +
    "\uffbc\042\uffbc\047\uffbc\050\uffbc\051\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\001\002\000\004\032\225\001\002\000" +
    "\016\036\163\043\164\044\064\045\062\046\063\061\160" +
    "\001\002\000\024\016\227\042\170\047\176\050\175\051" +
    "\202\052\203\053\201\054\174\055\200\001\002\000\016" +
    "\036\163\043\164\044\064\045\062\046\063\061\160\001" +
    "\002\000\024\017\231\042\170\047\176\050\175\051\202" +
    "\052\203\053\201\054\174\055\200\001\002\000\020\005" +
    "\uff9f\011\uff9f\014\uff9f\015\uff9f\020\uff9f\030\uff9f\061\uff9f" +
    "\001\002\000\020\005\uffb4\011\147\014\156\015\155\020" +
    "\152\030\uffb4\061\145\001\002\000\036\005\uff9e\006\uff9e" +
    "\011\uff9e\013\uff9e\014\uff9e\015\uff9e\020\uff9e\030\uff9e\036" +
    "\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\061\uff9e\001\002" +
    "\000\036\005\uffd8\006\uffd8\011\uffd8\013\uffd8\014\uffd8\015" +
    "\uffd8\020\uffd8\030\uffd8\036\uffd8\043\uffd8\044\uffd8\045\uffd8" +
    "\046\uffd8\061\uffd8\001\002\000\024\021\236\042\170\047" +
    "\176\050\175\051\202\052\203\053\201\054\174\055\200" +
    "\001\002\000\016\036\uff9d\043\uff9d\044\uff9d\045\uff9d\046" +
    "\uff9d\061\uff9d\001\002\000\016\036\163\043\164\044\064" +
    "\045\062\046\063\061\160\001\002\000\004\006\245\001" +
    "\002\000\024\031\242\042\170\047\176\050\175\051\202" +
    "\052\203\053\201\054\174\055\200\001\002\000\020\005" +
    "\uffb4\011\147\014\156\015\155\020\152\030\uffb4\061\145" +
    "\001\002\000\020\006\uff9b\036\163\043\164\044\064\045" +
    "\062\046\063\061\160\001\002\000\004\006\uff9a\001\002" +
    "\000\036\005\uff9c\006\uff9c\011\uff9c\013\uff9c\014\uff9c\015" +
    "\uff9c\020\uff9c\030\uff9c\036\uff9c\043\uff9c\044\uff9c\045\uff9c" +
    "\046\uff9c\061\uff9c\001\002\000\024\012\247\042\170\047" +
    "\176\050\175\051\202\052\203\053\201\054\174\055\200" +
    "\001\002\000\020\005\uffa6\011\uffa6\014\uffa6\015\uffa6\020" +
    "\uffa6\030\uffa6\061\uffa6\001\002\000\020\005\uffb4\011\147" +
    "\014\156\015\155\020\152\030\uffb4\061\145\001\002\000" +
    "\036\005\uffa4\006\uffa4\011\uffa4\013\253\014\uffa4\015\uffa4" +
    "\020\uffa4\030\uffa4\036\uffa4\043\uffa4\044\uffa4\045\uffa4\046" +
    "\uffa4\061\uffa4\001\002\000\036\005\uffa5\006\uffa5\011\uffa5" +
    "\013\uffa5\014\uffa5\015\uffa5\020\uffa5\030\uffa5\036\uffa5\043" +
    "\uffa5\044\uffa5\045\uffa5\046\uffa5\061\uffa5\001\002\000\020" +
    "\005\uffa3\011\uffa3\014\uffa3\015\uffa3\020\uffa3\030\uffa3\061" +
    "\uffa3\001\002\000\020\005\uffb4\011\147\014\156\015\155" +
    "\020\152\030\uffb4\061\145\001\002\000\036\005\uffa2\006" +
    "\uffa2\011\uffa2\013\uffa2\014\uffa2\015\uffa2\020\uffa2\030\uffa2" +
    "\036\uffa2\043\uffa2\044\uffa2\045\uffa2\046\uffa2\061\uffa2\001" +
    "\002\000\016\036\163\043\164\044\064\045\062\046\063" +
    "\061\160\001\002\000\024\030\uffd2\042\170\047\176\050" +
    "\175\051\202\052\203\053\201\054\174\055\200\001\002" +
    "\000\004\061\265\001\002\000\016\036\163\043\164\044" +
    "\064\045\062\046\063\061\160\001\002\000\004\030\uffb7" +
    "\001\002\000\024\041\264\042\170\047\176\050\175\051" +
    "\202\052\203\053\201\054\174\055\200\001\002\000\004" +
    "\032\uffd0\001\002\000\004\032\uffcf\001\002\000\036\005" +
    "\uffd9\006\uffd9\011\uffd9\013\uffd9\014\uffd9\015\uffd9\020\uffd9" +
    "\030\uffd9\036\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\061" +
    "\uffd9\001\002\000\022\003\uffb6\005\uffb6\011\uffb6\014\uffb6" +
    "\015\uffb6\020\uffb6\030\uffb6\061\uffb6\001\002\000\010\007" +
    "\027\010\017\024\024\001\002\000\006\005\uffb1\030\uffb1" +
    "\001\002\000\006\005\uffb0\030\uffb0\001\002\000\006\005" +
    "\uffb3\030\uffb3\001\002\000\006\005\uffb2\030\uffb2\001\002" +
    "\000\022\003\135\005\ufffb\011\ufffb\014\ufffb\015\ufffb\020" +
    "\ufffb\030\ufffb\061\ufffb\001\002\000\022\005\uffb4\006\277" +
    "\011\147\014\156\015\155\020\152\030\uffb4\061\145\001" +
    "\002\000\036\005\uffb5\006\uffb5\011\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\020\uffb5\030\uffb5\036\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\046\uffb5\061\uffb5\001\002\000\022\005\ufffa\006\ufffa" +
    "\011\ufffa\014\ufffa\015\ufffa\020\ufffa\030\ufffa\061\ufffa\001" +
    "\002\000\006\030\uffe4\036\uffe4\001\002\000\006\030\uffe0" +
    "\036\103\001\002\000\004\030\304\001\002\000\020\003" +
    "\ufffd\005\ufffd\007\ufffd\010\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\001\002\000\004\030\306\001\002\000\020\003\uffe3\005" +
    "\uffe3\007\uffe3\010\uffe3\022\uffe3\023\uffe3\024\uffe3\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\304\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\011\004\010\001\001\000\016\006\014\007\025\012" +
    "\027\015\020\016\024\041\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\132\001\001\000\004\055\120\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\051\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\056\030\001\001\000\002\001\001\000" +
    "\006\013\033\014\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\035\001\001\000" +
    "\002\001\001\000\006\021\040\044\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\046" +
    "\001\001\000\002\001\001\000\006\021\040\044\050\001" +
    "\001\000\002\001\001\000\004\042\053\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\056\001\001\000" +
    "\004\063\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\064\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\066" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\040\044\071\001\001\000\002\001\001\000\004\042\073" +
    "\001\001\000\002\001\001\000\006\013\075\014\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\035" +
    "\001\001\000\004\060\101\001\001\000\004\017\103\001" +
    "\001\000\006\014\112\020\111\001\001\000\002\001\001" +
    "\000\006\021\040\044\105\001\001\000\002\001\001\000" +
    "\006\003\107\004\010\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\040\044\114\001\001\000\002\001\001\000\006\014\112" +
    "\020\116\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\122\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\130\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\135\054\133\001" +
    "\001\000\026\022\277\023\143\024\145\035\153\036\147" +
    "\037\136\045\142\047\152\050\137\051\150\001\001\000" +
    "\002\001\001\000\026\022\141\023\143\024\145\035\153" +
    "\036\147\037\136\045\142\047\152\050\137\051\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\261\001\001\000\002\001\001\000\010\011\160" +
    "\025\245\032\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\160\025\234\032\156\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\160\025\161\032\156\001\001\000\002\001\001\000\004" +
    "\033\212\001\001\000\002\001\001\000\012\026\166\027" +
    "\176\030\171\031\172\001\001\000\010\011\160\025\165" +
    "\032\156\001\001\000\006\011\160\032\164\001\001\000" +
    "\002\001\001\000\012\026\166\027\176\030\171\031\172" +
    "\001\001\000\010\011\160\025\203\032\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\166\027" +
    "\176\030\171\031\172\001\001\000\004\066\205\001\001" +
    "\000\026\022\206\023\143\024\145\035\153\036\147\037" +
    "\136\045\142\047\152\050\137\051\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\011\160\025\220\032" +
    "\156\001\001\000\012\011\160\025\213\032\156\034\214" +
    "\001\001\000\002\001\001\000\012\026\166\027\176\030" +
    "\171\031\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\011\160\025\213\032\156\034\217\001\001\000" +
    "\002\001\001\000\012\026\166\027\176\030\171\031\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\160\025\225\032\156\001\001\000\012" +
    "\026\166\027\176\030\171\031\172\001\001\000\010\011" +
    "\160\025\227\032\156\001\001\000\012\026\166\027\176" +
    "\030\171\031\172\001\001\000\004\067\231\001\001\000" +
    "\026\022\232\023\143\024\145\035\153\036\147\037\136" +
    "\045\142\047\152\050\137\051\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\166\027\176\030\171" +
    "\031\172\001\001\000\004\070\236\001\001\000\012\011" +
    "\160\025\240\032\156\052\237\001\001\000\002\001\001" +
    "\000\012\026\166\027\176\030\171\031\172\001\001\000" +
    "\026\022\242\023\143\024\145\035\153\036\147\037\136" +
    "\045\142\047\152\050\137\051\150\001\001\000\012\011" +
    "\160\025\240\032\156\052\243\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\166\027\176\030\171\031" +
    "\172\001\001\000\004\064\247\001\001\000\026\022\250" +
    "\023\143\024\145\035\153\036\147\037\136\045\142\047" +
    "\152\050\137\051\150\001\001\000\004\046\251\001\001" +
    "\000\002\001\001\000\004\065\253\001\001\000\026\022" +
    "\254\023\143\024\145\035\153\036\147\037\136\045\142" +
    "\047\152\050\137\051\150\001\001\000\002\001\001\000" +
    "\010\011\160\025\256\032\156\001\001\000\012\026\166" +
    "\027\176\030\171\031\172\001\001\000\002\001\001\000" +
    "\010\011\160\025\262\032\156\001\001\000\002\001\001" +
    "\000\012\026\166\027\176\030\171\031\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\274\001\001\000\012\007\273\012\270\040\272\041" +
    "\271\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\275\054\133\001" +
    "\001\000\026\022\141\023\143\024\145\035\153\036\147" +
    "\037\136\045\142\047\152\050\137\051\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\057\301\001\001" +
    "\000\004\017\302\001\001\000\002\001\001\000\006\003" +
    "\304\004\010\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  // INIT CODE
  // Codigo para inicializar
  System.out.println("---------------------------------------------------------------------\n"
                    +"|       ANALIZADOR LEXICO Y SINTACTICO PARA LEGUAJE PASCAL          |\n"
                    +"---------------------------------------------------------------------\n");
  this.htmlGenerator = new HTMLGenerator(this.fileName);

    }



    Stack<Regla> stack; // Pila donde se almacenan las reglas que se han reducido

    HTMLGenerator htmlGenerator;

    public String fileName;

    public void report_error(String mensajeError, Object token) {

                 StringBuilder salidaError = new StringBuilder("ERROR SINTACTICO: ");

                 if (token instanceof java_cup.runtime.Symbol) {

                     java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) token);

                     if (s.left >= 0) {
                         salidaError.append(" en la linea "+(s.left + 1));
                         if (s.right >= 0)
                             salidaError.append(", columna "+(s.right));
                     }

                     if (s.value != null){
                         salidaError.append(". No se esperaba el token <"+s.value.toString()+">");
                     }

                 }

        salidaError.append(" : " + mensajeError);

        System.err.println(salidaError);
    }

    /* Método para errores irrecuperables */

    public void unrecovered_syntax_error(Symbol token) throws java.lang.Exception {
      report_fatal_error("El analizador no pudo recuperarse del error sintactico", token);
    }

    public void report_fatal_error(String mensajeError, Object token) {
        mensajeError = "Error sintactico irrecuperable\n" + mensajeError;
        report_error(mensajeError, token);
        System.exit(1);
    }

    /* Método para errores recuperables */

    public void syntax_error(Symbol token) {
      report_error("Se procedera a intentar continuar con el analisis sintactico", token);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PRG ::= program identifier semicolons BLQ point 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 htmlGenerator.closeHTML(i1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PRG",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PRG EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              String RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dcllist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLQ ::= DCLLIST begin NT$0 SENTLIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dcllist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 htmlGenerator.indentLevel--;

                                                      htmlGenerator.getMainProgram(sentlist);
                                                      RESULT = dcllist + htmlGenerator.getReservedWord("begin") + htmlGenerator.checkReturnParam(sentlist) + htmlGenerator.getReservedWord("end");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BLQ",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DCLLIST ::= 
            {
              String RESULT =null;
		
                                       RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DCLLIST ::= DCLLIST DCL 
            {
              String RESULT =null;
		int dcllistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dcllist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dcl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                       RESULT = dcllist + (String)dcl;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // NT$1 ::= 
            {
              String RESULT =null;
 htmlGenerator.sentCond = false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTLIST ::= NT$1 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  // Hay mas de una sentencia
                                                                  RESULT = sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTLIST ::= SENTLIST SENT 
            {
              String RESULT =null;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                           RESULT = sentlist + (String)sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTLIST ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTLIST",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DCL ::= DEFCTE 
            {
              String RESULT =null;
		int defcteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defcteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defcte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          htmlGenerator.updateLastDcl(defcte);
                          RESULT = defcte;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DCL ::= DEFVAR 
            {
              String RESULT =null;
		int defvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defvar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          htmlGenerator.updateLastDcl(defvar);
                          RESULT = defvar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DCL ::= DEFPROC 
            {
              String RESULT =null;
		int defprocleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defprocright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defproc = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  // TODO
                           RESULT = defproc;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DCL ::= DEFFUN 
            {
              String RESULT =null;
		int deffunleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deffunright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deffun = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                          RESULT = deffun;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DCL ::= DEFTYPE 
            {
              String RESULT =null;
		int deftypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deftyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deftype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                           htmlGenerator.updateLastDcl(deftype);
                           RESULT = deftype;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DCL ::= error 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NT$2 ::= 
            {
              String RESULT =null;
 htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DEFCTE ::= const_t NT$2 CTELIST 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ctelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 htmlGenerator.indentLevel--;

                                                                      RESULT = htmlGenerator.getReservedWord(htmlGenerator.getSent("const")) + ctelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFCTE",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // CTELIST ::= identifier equal SIMPVALUE semicolons 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String simpvalue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                 RESULT = htmlGenerator.getSent(htmlGenerator.getIdentDeclaration(i1) + "=" + simpvalue + ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // CTELIST ::= CTELIST identifier equal SIMPVALUE semicolons 
            {
              String RESULT =null;
		int ctelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int ctelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String ctelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String simpvalue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                  RESULT = (String)ctelist + htmlGenerator.getSent(htmlGenerator.getIdent(i2) + "=" + (String)simpvalue + ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CTELIST",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SIMPVALUE ::= decimal_value 
            {
              String RESULT =null;
		int dvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    RESULT = htmlGenerator.getConst(dv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SIMPVALUE ::= hexadecimal_value 
            {
              String RESULT =null;
		int hvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int hvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String hv = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    RESULT = htmlGenerator.getConst(hv);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SIMPVALUE ::= string_literal 
            {
              String RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sl = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                    RESULT = htmlGenerator.getConst("'"+sl+"''");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SIMPVALUE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NT$3 ::= 
            {
              String RESULT =null;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DEFVAR ::= var NT$3 DEFVARLIST semicolons 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String defvarlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                  htmlGenerator.indentLevel--;

                                                  RESULT = htmlGenerator.getReservedWord(htmlGenerator.getSent("var")) + defvarlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DEFVARLIST ::= VARLIST colons ALLTYPES 
            {
              String RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                            htmlGenerator.pushVar(varlist, alltypes);
                                                                                            RESULT = htmlGenerator.getSent(varlist + " : " + alltypes + "; ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DEFVARLIST ::= DEFVARLIST semicolons VARLIST colons ALLTYPES 
            {
              String RESULT =null;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String defvarlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                            htmlGenerator.pushVar(varlist, alltypes);
                                                                                            RESULT = defvarlist + htmlGenerator.getSent(varlist + " : " + alltypes + "; ");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFVARLIST",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // VARLIST ::= identifier 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    RESULT = htmlGenerator.getIdentDeclaration(i1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VARLIST ::= identifier comma VARLIST 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                    RESULT = htmlGenerator.getIdentDeclaration(i2) + "," + varlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARLIST",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 htmlGenerator.addMethod(i1, false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEFPROC ::= procedure identifier NT$4 FORMAL_PARAMLIST semicolons BLQ semicolons 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int formal_paramlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formal_paramlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String formal_paramlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                    RESULT = htmlGenerator.getProc(i1, formal_paramlist, blq);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFPROC",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // NT$5 ::= 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 htmlGenerator.addMethod(i2, true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEFFUN ::= function identifier NT$5 FORMAL_PARAMLIST colons ALLTYPES semicolons BLQ semicolons 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int formal_paramlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int formal_paramlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String formal_paramlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		

                    RESULT = htmlGenerator.getFunc(i2, formal_paramlist, alltypes, blq);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFFUN",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FORMAL_PARAMLIST ::= 
            {
              String RESULT =null;
		
                                                                              RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FORMAL_PARAMLIST ::= open_bracket FORMAL_PARAM close_bracket 
            {
              String RESULT =null;
		int formal_paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int formal_paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String formal_param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                              RESULT = "(" + formal_param + ")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAMLIST",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FORMAL_PARAM ::= VARLIST colons ALLTYPES 
            {
              String RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                                  RESULT = varlist + ":" + alltypes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FORMAL_PARAM ::= VARLIST colons ALLTYPES semicolons FORMAL_PARAM 
            {
              String RESULT =null;
		int varlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int varlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String varlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int formal_paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int formal_paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String formal_param = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                                  RESULT = varlist + ":" + alltypes + ";" + formal_param;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FORMAL_PARAM",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TBAS ::= int_name 
            {
              String RESULT =null;
		
                       RESULT = htmlGenerator.getReservedWord(" INTEGER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TBAS ::= real_name 
            {
              String RESULT =null;
		
                       RESULT = htmlGenerator.getReservedWord(" REAL");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TBAS ::= char_name 
            {
              String RESULT =null;
		
                       RESULT = htmlGenerator.getReservedWord(" CHARACTER");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TBAS",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENT ::= ASIG semicolons 
            {
              String RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String asig = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                             RESULT = htmlGenerator.getSent(asig + ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENT ::= PROC_CALL semicolons 
            {
              String RESULT =null;
		int proc_callleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int proc_callright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String proc_call = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                             RESULT = htmlGenerator.getSent(proc_call + ";");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENT ::= EXEBLQ 
            {
              String RESULT =null;
		int exeblqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exeblqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exeblq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                             RESULT = exeblq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENT ::= COND 
            {
              String RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String cond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                             RESULT = htmlGenerator.getSent(cond);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENT ::= WLOOP 
            {
              String RESULT =null;
		int wloopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int wloopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String wloop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                             RESULT = htmlGenerator.getSent(wloop);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENT ::= FLOOP 
            {
              String RESULT =null;
		int floopleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int floopright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String floop = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                             RESULT = htmlGenerator.getSent(floop);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENT ::= CASE 
            {
              String RESULT =null;
		int case_tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int case_tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String case_t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                             RESULT = htmlGenerator.getSent(case_t);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIG ::= ID asig EXP 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              RESULT = htmlGenerator.checkAsig(id,exp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ASIG",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ID ::= identifier 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                          RESULT = htmlGenerator.getIdent(i1);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ID ::= identifier open_square_bracket EXP close_square_bracket 
            {
              String RESULT =null;
		int i4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                          RESULT = htmlGenerator.getIdent(i4) + "[ " + exp + " ]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ID ::= identifier point identifier 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                          RESULT = htmlGenerator.getIdent(i2) + "." + htmlGenerator.getIdent(i3);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ID",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= EXP OP EXP 
            {
              String RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  RESULT = (String)exp1 + op + (String)exp2;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= FACTOR 
            {
              String RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String factor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                  RESULT = factor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OP ::= OPCOMP 
            {
              String RESULT =null;
		int opcompleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opcompright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String opcomp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = opcomp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // OP ::= OPLOG 
            {
              String RESULT =null;
		int oplogleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oplogright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oplog = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = oplog;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OP ::= OPARIT 
            {
              String RESULT =null;
		int oparitleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int oparitright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String oparit = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                         RESULT = oparit;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // OPCOMP ::= comparator_op 
            {
              String RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                              RESULT = " "+op+" ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPCOMP",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPARIT ::= plus 
            {
              String RESULT =null;
		
                        RESULT = " + ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPARIT ::= minus 
            {
              String RESULT =null;
		
                        RESULT = " - ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPARIT ::= product 
            {
              String RESULT =null;
		
                        RESULT = " * ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPARIT ::= div_op 
            {
              String RESULT =null;
		
                        RESULT = " div ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPARIT ::= mod_op 
            {
              String RESULT =null;
		
                        RESULT = " mod ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPARIT",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPLOG ::= and_op 
            {
              String RESULT =null;
		
                      RESULT = " and ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPLOG ::= or_op 
            {
              String RESULT =null;
		
                      RESULT = " or ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPLOG",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FACTOR ::= SIMPVALUE 
            {
              String RESULT =null;
		int simpvalueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int simpvalueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String simpvalue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                RESULT = simpvalue;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FACTOR ::= not_op FACTOR 
            {
              String RESULT =null;
		int factorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int factorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String factor = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                RESULT = "not" + factor;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FACTOR ::= open_bracket EXP close_bracket 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                RESULT = "(" + exp + ")";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FACTOR ::= identifier SUBPARAMLIST 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String subparamlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                RESULT = htmlGenerator.getIdent(i1) + (String)subparamlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FACTOR ::= identifier open_square_bracket EXP close_square_bracket 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                RESULT = htmlGenerator.getIdent(i2) + "[" + exp + "]";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FACTOR ::= identifier point identifier 
            {
              String RESULT =null;
		int i3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int i3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int i4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int i4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                RESULT = htmlGenerator.getIdent(i3) + "." + htmlGenerator.getIdent(i4);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FACTOR",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SUBPARAMLIST ::= 
            {
              String RESULT =null;
		
                                                                RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SUBPARAMLIST ::= open_bracket EXPLIST close_bracket 
            {
              String RESULT =null;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String explist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                RESULT = " (" + explist + ") ";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SUBPARAMLIST",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPLIST ::= EXP 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                             RESULT = exp;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPLIST ::= EXP comma EXPLIST 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String explist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                             RESULT = exp + "," + explist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPLIST",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PROC_CALL ::= identifier SUBPARAMLIST 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int subparamlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int subparamlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String subparamlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                        RESULT = htmlGenerator.getIdent(i1) + (String)subparamlist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PROC_CALL",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$6 ::= 
            {
              String RESULT =null;
		int dcllist_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dcllist_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String dcllist_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXEBLQ ::= DCLLIST_BLQ begin NT$6 SENTLIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcllist_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int dcllist_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dcllist_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sentlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                 htmlGenerator.indentLevel--;

                                                                 RESULT = dcllist_blq + htmlGenerator.getReservedWordIdent("begin") + sentlist + htmlGenerator.getReservedWordIdent("end");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXEBLQ",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DCLLIST_BLQ ::= 
            {
              String RESULT =null;
		
                                                    RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DCLLIST_BLQ ::= DCLLIST_BLQ semicolons DCL_BLQ 
            {
              String RESULT =null;
		int dcllist_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dcllist_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String dcllist_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dcl_blqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dcl_blqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String dcl_blq = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                        RESULT = dcllist_blq + ";" + dcl_blq;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCLLIST_BLQ",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DCL_BLQ ::= DEFCTE 
            {
              String RESULT =null;
		int defcteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defcteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defcte = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = defcte;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DCL_BLQ ::= DEFVAR 
            {
              String RESULT =null;
		int defvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int defvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String defvar = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = defvar;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DCL_BLQ ::= DEFTYPE 
            {
              String RESULT =null;
		int deftypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int deftyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String deftype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = deftype;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DCL_BLQ",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$7 ::= 
            {
              String RESULT =null;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",48, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DEFTYPE ::= type NT$7 TYPELIST 
            {
              String RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int typelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String typelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                      htmlGenerator.indentLevel--;
                                                                      RESULT = htmlGenerator.getReservedWord(htmlGenerator.getSent("type ")) + typelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFTYPE",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // TYPELIST ::= identifier equal UDTYPE semicolons 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int udtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int udtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String udtype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                                                   htmlGenerator.pushType(i1);
                                                                                   RESULT =  htmlGenerator.getSent(htmlGenerator.getIdentDeclaration(i1) + " = " + udtype + htmlGenerator.getSentClose(";"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // TYPELIST ::= identifier equal UDTYPE semicolons TYPELIST 
            {
              String RESULT =null;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int udtypeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int udtyperight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String udtype = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int typelistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typelistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String typelist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                   htmlGenerator.pushType(i2);
                                                                                   RESULT =  htmlGenerator.getSent(htmlGenerator.getIdentDeclaration(i2) + " = " + udtype + htmlGenerator.getSentClose(";")) + typelist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TYPELIST",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // UDTYPE ::= array open_square_bracket SIMPVALUE two_points SIMPVALUE close_square_bracket of ALLTYPES 
            {
              String RESULT =null;
		int simpvalue1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int simpvalue1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String simpvalue1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int simpvalue2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int simpvalue2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String simpvalue2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int alltypesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int alltypesright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String alltypes = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

                    RESULT = htmlGenerator.getReservedWord("array ") + "[ " + htmlGenerator.checkRange(simpvalue1,simpvalue2) + " ]" + htmlGenerator.getReservedWord(" of ") + alltypes;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$8 ::= 
            {
              String RESULT =null;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",49, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // UDTYPE ::= record NT$8 DEFVARLIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int defvarlistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int defvarlistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String defvarlist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    htmlGenerator.indentLevel--;

                    RESULT = htmlGenerator.getReservedWord("record ") + defvarlist + htmlGenerator.getSentOpen(htmlGenerator.getReservedWord("end"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UDTYPE",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ALLTYPES ::= TBAS 
            {
              String RESULT =null;
		int tbasleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tbasright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tbas = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                   RESULT = tbas;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ALLTYPES ::= identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                RESULT = htmlGenerator.getIdent(i);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ALLTYPES",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$9 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",50, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= if_t EXP then_t NT$9 SENT ELSECOND 
            {
              String RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elsecondleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elsecondright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String elsecond = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                            RESULT = htmlGenerator.getReservedWord("if ") + htmlGenerator.checkBool(exp) + htmlGenerator.getReservedWord(" then ") + sent + elsecond;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ELSECOND ::= 
            {
              String RESULT =null;
		
                                   RESULT = "";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$10 ::= 
            {
              String RESULT =null;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ELSECOND ::= else_t NT$10 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                        RESULT = htmlGenerator.getSent(htmlGenerator.getReservedWord("else ")) + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ELSECOND",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$11 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // WLOOP ::= while_t EXP do_t NT$11 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                  RESULT = htmlGenerator.getReservedWord("while ") + exp + htmlGenerator.getReservedWord(" do ") + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WLOOP",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$12 ::= 
            {
              String RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 htmlGenerator.sentCond = true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",53, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FLOOP ::= for_t identifier asig EXP to EXP do_t NT$12 SENT 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int exp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String exp1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                                                                               RESULT = htmlGenerator.getReservedWord("for ") + htmlGenerator.getIdent(i1) +
                                                                                                               ":=" + exp1 + htmlGenerator.getReservedWord(" to ") + exp2 + htmlGenerator.getReservedWord(" do ") + sent;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FLOOP",38, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$13 ::= 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
htmlGenerator.indentLevel++;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",54, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CASE ::= case_t EXP of NT$13 CASELIST end 
            {
              String RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int caselistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int caselistright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String caselist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                                                    htmlGenerator.indentLevel--;

                                                    RESULT = htmlGenerator.getReservedWord("case ") + exp + htmlGenerator.getReservedWord(" of ") +
                                                    caselist + htmlGenerator.getSent(htmlGenerator.getReservedWord("end"));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASE",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CASELIST ::= EXP colons SENT 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             RESULT = htmlGenerator.getSent(exp + " : " + htmlGenerator.deleteTags(sent));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CASELIST ::= EXP colons SENT CASELIST 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String sent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int caselistleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int caselistright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String caselist = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                                                             RESULT = htmlGenerator.getSent(exp + " : " + htmlGenerator.deleteTags(sent)) + caselist;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CASELIST",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
